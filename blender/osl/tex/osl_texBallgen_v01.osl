#define MAX_POINTS 30

shader texBallgen (
	point balls_min_max_pow = point(1.0,4.0,1.0),
	point radius_min_max_pow = point(0.1,0.1,1.0),
	point distrib_offset = point(1.0,1.0,1.0),
	float distrib_maxdst = 1.0,
	point rnd_seed = point(0.0,0.0,0.0),

	point in_pos = point(0,0,0),
	output float out_Dist = 0.0,
	output float out_Ares = 0.0,
	output point out_Axis1 = point(0,0,0),
	output point out_Axis2 = point(0,0,0)
)
{
	point pThis = isconnected(in_pos)?in_pos:P;
	float rnd = rnd_seed[0]+rnd_seed[1]+rnd_seed[2];
	float random_points = noise("uperlin",point(0.11,0.1,rnd));
	random_points = balls_min_max_pow[0]+(balls_min_max_pow[1]-balls_min_max_pow[0])*pow(random_points,balls_min_max_pow[2]);
	float points = min(max(random_points,1),MAX_POINTS);
	point b_centers[MAX_POINTS];
	float b_sizes[MAX_POINTS];
	point mediana = point(0,0,0);
	for(int i=0;i<points;i++){
		float random_x = noise("perlin",point(0.22,1.2+i,rnd))*distrib_offset[0];
		float random_y = noise("perlin",point(0.33,11.3+i,rnd))*distrib_offset[1];
		float random_z = noise("perlin",point(0.44,111.4+i,rnd))*distrib_offset[2];
		float random_r = noise("uperlin",point(0.55,0.5+i,rnd));
		random_r = radius_min_max_pow[0]+(radius_min_max_pow[1]-radius_min_max_pow[0])*pow(random_r,radius_min_max_pow[2]);
		point center = point(random_x,random_y,random_z);
		float dist = length(center);
		if(dist+random_r > distrib_maxdst){
			random_r = distrib_maxdst-dist;
			if(random_r<radius_min_max_pow[0]){
				random_r = 0;
			}
		}
		if(dist+random_r > distrib_maxdst){
			random_r = 0;
		}
		b_centers[i] = center;
		b_sizes[i] = random_r;
		mediana = mediana+b_centers[i];
	}
	mediana = mediana/points;
	point dir2med = pThis - mediana;
	point mediana_flt = mediana;
	float minlen = 999;
	float aresto = 0;
	float edg_c = 0;
	point edg1d = point(0,0,0);
	float edg2min = 9999;
	for(int i=0;i<points;i++){
		if(b_sizes[i] <= 0.001){
			continue;
		}
		point dir2cen = pThis - b_centers[i];
		float ll = length(dir2cen);
		if(ll < b_sizes[i]){
			minlen = min(minlen,ll/b_sizes[i]);
			aresto = aresto+1;
		}
		if(ll>0.001){
			point edgNear = b_centers[i]+normalize(dir2cen)*b_sizes[i];
			point dir2edg = (pThis-edgNear);
			float dir2edg_l = length(dir2edg);
			edg_c = edg_c+1;
			edg1d = edg1d+normalize(dir2edg)*(dir2edg_l/b_sizes[i]);
			//edg2avg = edg2avg+dir2edg_l;
			edg2min = min(edg2min,dir2edg_l);
		}
		// Median floating
		//float dd = clamp(dot(normalize(dir2cen),normalize(dir2med)),-0.1,0.9);
		float dd = dot(normalize(dir2cen),normalize(dir2med));
		mediana_flt = mediana_flt+dd*(length(b_centers[i]-mediana)+1*b_sizes[i])*normalize(b_centers[i]-mediana);
	}
	point dir2med_flt = pThis - mediana_flt;
	float edg2ang = fabs(atan2(dir2med_flt[1],dir2med_flt[0]));
	float edg2flt = length(dir2med_flt);
	out_Ares = aresto;
	out_Dist = (aresto>0)?(1.0-minlen):out_Dist;
	out_Axis1 = (edg_c>0)?edg1d/edg_c:out_Axis1;
	out_Axis2 = (edg_c>0)?point(edg2min,edg2ang,edg2flt):out_Axis2;
}
