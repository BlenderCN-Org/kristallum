// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html
// IMPORTANT: For strong look camera z == Eye level above surface!

void make_orthonormals(vector N, output vector a, output vector b)
{
	//point p1 = vector(0, 0, 1);
	//if(fabs(dot(p1, N))>0.9){
	//	p1 = vector(1, 0, 0);
	//}
	//a = cross(p1, N);
	if(N[0] != N[1] || N[0] != N[2]) a = cross(vector(1, 1, 1), N);
	else a = cross(vector(-1, 1, 1), N);

	a = normalize(a);
	b = cross(N, a);
}

point project_vec2vec(point projTarget, point pA, point pB)
{
	point p2 = normalize(projTarget);
	point p1 = pA;
	point pC = pB;
	float dl = length(p2 - p1);
	float l2 = pow(dl,2);
	float t = dot(pC - p1, p2 - p1) / l2;
	point proj = p1 + t * (p2 - p1);
	return proj;
}

point nearest_vec2plane(point pOrig, point pTarg, point planeNrm)
{
	point vec = pTarg-pOrig;
	point pTargProjected = pTarg - dot(vec, planeNrm) * planeNrm;
	return pTargProjected;
}

point project_vec2plane(point pOrig, point pTarg, point planeNrm, point planeXAxis)
{
	//https://stackoverflow.com/questions/9605556/how-to-project-a-3d-point-to-a-3d-plane
	float proj_x = dot((pTarg-pOrig),planeXAxis);
	float proj_y = dot((pTarg-pOrig),cross(planeNrm,planeXAxis));
	return point(proj_x,proj_y,0.0);
}

shader charMat (
	point eyeCenter = point(0,0,0),
	float eyeSize = 0.1,
	point eyeAspect = point(1,1,1),
	//point eyeViewTarget = point(0,-1,0),
	point eyeViewOffset = point(0,0,0),

	point eye_Ball_SmI_SmO = point(0.31, 0.06, 0.28),
	point eye_Iris_SmI_SmO = point(10, 0.15, 0.22),
	point eye_Phas_an1_an2 = point(0, 2.5, 4.6),

	point in_pos = P,

	output float out_eyeBase = 0.0,
	output float out_eyeBord = 0.0,
	output float out_eyeIris = 0.0,
	output point out_decarAxis = point(0,0,0),
	output point out_polarAxis = point(0,0,0),
	output point out_Normal = point(0,0,0)
)
{
	float eyeWidth = eye_Ball_SmI_SmO[0];
	float eyeWidthI = eye_Ball_SmI_SmO[1];
	float eyeWidthO = eye_Ball_SmI_SmO[2];
	float eyeIris = eye_Iris_SmI_SmO[0];
	float eyeIrisI = eye_Iris_SmI_SmO[1];
	float eyeIrisO = eye_Iris_SmI_SmO[2];

	point pCamWrl = transform("camera", "common", point(0,0,0));
	point pThisCenter = isconnected(eyeCenter)?eyeCenter:transform("object", "common", point(0,0,0));
	point pThis = isconnected(in_pos)?in_pos:P;
	{
		// reprojecting on eye sphere eyeXYZSize
		// https://gamedev.stackexchange.com/questions/27755/optimized-algorithm-for-line-sphere-intersection-in-glsl
		point p1 = pThis;
		point p2 = pCamWrl;
		point p3 = pThisCenter;
		point n2c = pThis-pThisCenter;
		p1 = point(pThisCenter[0]+n2c[0]/eyeAspect[0],pThisCenter[1]+n2c[1]/eyeAspect[1],pThisCenter[2]+n2c[2]/eyeAspect[2]);
		point d = p2 - p1;
		float a = dot(d, d);
		float b = 2.0 * dot(d, p1 - p3);
		float c = dot(p3, p3) + dot(p1, p1) - 2.0 * dot(p3, p1) - eyeSize*eyeSize;
		float test = b*b - 4.0*a*c;
		if (test < 0.0) {
			return;
		}
		float testU = (-b - sqrt(test)) / (2.0 * a);
		pThis = p1 + testU * (p2 - p1);
	}
	point nThis = normalize(pThisCenter-pThis);
	//point pViewTarget = isconnected(eyeViewTarget)?eyeViewTarget:pCamWrl;
	point viewDirection = pThisCenter-(pCamWrl+eyeViewOffset);//pViewTarget
	point nView = normalize(viewDirection);
	point eyeBallCenter = pThisCenter+nView*eyeSize;
	//point eyeBallInCmVi = transform("common", "camera", eyeBallCenter);

	float eyeSide = 0;
	float eyeBall = 0;
	float eyeNormalPos = acos(-dot(nThis,nView));
	float eyeNormalDist = fabs(eyeNormalPos);
	point eyeCenterNrm = normalize(eyeBallCenter - pThisCenter);
	point proj2 = normalize(nearest_vec2plane(pThisCenter, point(1,0,0), eyeCenterNrm)-pThisCenter);
	point projp = project_vec2plane(pThisCenter, pThis, eyeCenterNrm, proj2);
	float eyePointAngle = atan2(projp[1],projp[0])+M_PI;
	float midlfac = 0.0;
	float eyePointoUnspr = 0.0;
	if(eyeNormalDist < eyeWidth){
		if(eyeNormalDist < eyeWidthI){
			eyeSide = 1;
		}else if(eyeNormalDist > eyeWidthO){
			eyeSide = 2;
		}else{
			eyeSide = 3;
		}
	}

	midlfac = (eyeNormalDist-eyeWidthI)/(eyeWidthO-eyeWidthI);
	if(eyeNormalDist < eyeIrisI){
		midlfac = midlfac*pow((eyeNormalDist-eyeWidthI)/(eyeIrisI-eyeWidthI),2);
	}
	if(eyeNormalDist > eyeIrisO){
		midlfac = midlfac*pow(1.0-(eyeNormalDist-eyeIrisO)/(eyeWidthO-eyeIrisO),2);
	}
	eyePointoUnspr = 1;
	if(eyeIris > 0){
		float eyePointLevel = sin(eyePointAngle*eyeIris+eye_Phas_an1_an2[0]);
		eyePointoUnspr = pow(eyePointLevel+1.0,1.3);
		float phasF = eye_Phas_an1_an2[1];
		float phasT = eye_Phas_an1_an2[2];
		if(fabs(phasF-phasT)>0.001){
			//if(sign(eyeBallInCmVi[0]) < 0){
			//	//eyePointAngle = M_2PI - eyePointAngle;
			//}
			if(eyePointAngle<phasF || eyePointAngle>phasT){
				float f1 = (smoothstep(phasF*0.9,phasF*1.0,eyePointAngle))*eyePointoUnspr;
				float f2 = (1.0-smoothstep(phasT*1.0,phasT*1.1,eyePointAngle))*eyePointoUnspr;
				eyePointoUnspr = min(f1,f2);
			}
		}
	}
	eyeBall = clamp(midlfac*eyePointoUnspr,0,1);
	out_Normal = nThis;
	out_eyeIris = 0;
	out_eyeBase = 0;
	out_eyeBord = 0;
	out_decarAxis = point(-1*projp[0]/eyeSize,projp[1]/eyeSize,midlfac);
	out_polarAxis = point(eyeNormalDist/eyeWidth,eyePointAngle,eyeBall);
	if(eyeSide > 0){
		out_eyeBase = 1.0;
		if(eyeSide <= 2){
			out_eyeBord = 1.0;
		}else{
			out_eyeIris = 1.0;
		}
	}
}
