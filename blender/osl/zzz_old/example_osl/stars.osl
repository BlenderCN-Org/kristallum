// http://blog.michelanders.nl/2013/04/an-osl-starfield-shader-for-blender_69.html
point voronoi3dp(point p, float density, output float d2)
{
	int xx, yy, zz, xi, yi, zi;

	xi = (int)floor(p[0]);
	yi = (int)floor(p[1]);
	zi = (int)floor(p[2]);
	
	float dbest = 1e10;
	point pbest = 1e10;
	vector dz = vector(7,111,19);
	for (xx = xi - 1; xx <= xi + 1; xx++) {
		for (yy = yi - 1; yy <= yi + 1; yy++) {
			for (zz = zi - 1; zz <= zi + 1; zz++) {
				vector ip = vector(xx, yy, zz);
				if(cellnoise(ip)<density){
					point  vp = ip + cellnoise(ip+dz);
					vector dp = p-vp;
					float  d  = dot(dp,dp);
					if (d < dbest) {
						dbest = d;
						pbest = vp;
					}
				}
			}
		}
	}
	d2=dbest;
	return pbest;
}

shader stars(
	point Pos = P,
	float Stardensity = 0.001,
	float Scale = 1000.0,
	float Falloff = 10,
	
	output color col = 0.0,
	output float fac = 0.0
){
	point p = Pos * Scale;
	
	float d;
	voronoi3dp(p,Stardensity,d);
	fac = exp(-d*Falloff);
	if(d<100){
		col = blackbody(3500.0+6000.0*cellnoise(p+vector(17,17,17)));
	}
}
