// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html

#define WRI_OBJECT_PREFIX "wri_"
#define WRI_VERTEXCOL_NAME "Wri"
#define WRI_GRIDT_MINANG 0.01
#define ISWHITE(cl) (fabs(cl[0]-cl[1])<0.01 && fabs(cl[0]-cl[2])<0.01)
#define MAXCACHE 100
#define MAXCACHEx3 300

shader charWriVc (
	point base_Frac_Steps = point(0.005, 0, 3),
	point wri_DirectFalloff = point(30,30,30),
	point wri_SideFalloff = point(20,20,20),
	point wri_Levels = point(-1,1,1),
	float wri_NormalBlend = 0.1,

	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),
	color in_color = color(0,0,0),
	string in_color_vcname = "",
	string wri_ObjPrefix = "",

	output float out_Total = 0.0,
	output point out_Normal = 0.0,
	output float WriR = 0.0,
	output float WriG = 0.0,
	output float WriB = 0.0
){
	point rbtPixels = transform("raster", point("NDC", 1,1,0));
	float pixelWidth = min(rbtPixels[0],rbtPixels[1])*base_Frac_Steps[0];

	string vcname = in_color_vcname;
	if(strlen(vcname)<3){
		vcname = WRI_VERTEXCOL_NAME;
	}

	point pThis = length(in_pos)>0?in_pos:P;
	point nThis = length(in_nrm)>0?in_nrm:N;
	point pCamWrl = point("camera", 0, 0, 0);
	point pThisRST = transform("raster", pThis);

	if(wri_NormalBlend>0){
		string WOP = wri_ObjPrefix;
		if(strlen(WOP)<3){
			WOP = WRI_OBJECT_PREFIX;
		}
		string thisId;
		getattribute("geom:name",thisId);
		if(startswith(thisId,WOP) > 0){
			string hitId;
			point pCurr = pThis;
			point pSideHit;
			point nSideHit;
			int isHit = trace(pCurr-nThis*0.00001, -nThis);
			getmessage("trace","geom:name",hitId);
			getmessage("trace","P",pSideHit);
			getmessage("trace","N",nSideHit);
			if(isHit > 0 && startswith(hitId,WOP) < 1){
				float wriDist = length(pCurr-pSideHit);
				wriDist = wriDist/wri_NormalBlend;
				nThis = mix(nSideHit,nThis,clamp(wriDist,0,1));
				//nThis = nSideHit;
			}
		}
	}

	int ptncIdi[3] = {0, MAXCACHE, MAXCACHE*2};
	int ptncIdx[3] = {0, MAXCACHE, MAXCACHE*2};
	point potencialsPoints[MAXCACHEx3] = {0};
	point potencialsPointd[MAXCACHEx3] = {0};
	float potencialsLevels[MAXCACHEx3] = {0};
	{
		float testWidth = pixelWidth;
		float testStep = 1;
		if(base_Frac_Steps[2]>0){
			testStep = base_Frac_Steps[2]*1/(2*testWidth);
		}else{
			testStep = max(0.01,1/base_Frac_Steps[1]);
		}
		for(float ii=0; ii<1; ii = ii+testStep){
			float xi=mix(-testWidth,testWidth, ii);
			for(float jj=0; jj<1; jj = jj+testStep){
				float yi=mix(-testWidth,testWidth, jj);
				point pOffs = point(xi,yi,0);
				point pSideRst = pThisRST+pOffs;
				point pSideWlr = transform("raster", "world", pSideRst);
				int isHit = trace(pCamWrl, pSideWlr-pCamWrl);
				if(isHit > 0){
					point hitPos = point(0,0,0);
					color hitColor = color(0,0,0);
					getmessage("trace", vcname, hitColor);
					getmessage("trace", "P", hitPos);
					for(int chnl=0;chnl<3;chnl++){
						float hitLevel = hitColor[chnl];
						if(hitLevel > 0.00001){
							if(ISWHITE(hitColor)){
								// Stopper in this direction
								hitLevel = 0;
							}
							float angl = atan2(yi,xi)+M_PI_2;
							int iReplacedOld = 0;
							for(int kk=ptncIdi[chnl];kk<ptncIdx[chnl];kk++){
								float angl2 = atan2(potencialsPoints[kk][1],potencialsPoints[kk][0])+M_PI_2;
								float lenf = length(potencialsPoints[kk]-pOffs);
								if(fabs(angl2-angl) < WRI_GRIDT_MINANG && length(pOffs)<length(potencialsPoints[kk])){
									iReplacedOld++;
									potencialsPoints[kk] = pOffs;
									potencialsLevels[kk] = hitLevel;
									potencialsPointd[kk] = hitPos-pThis;
									break;
								}
							}
							if(iReplacedOld == 0 && ptncIdx[chnl]<ptncIdi[chnl]+MAXCACHE-1){
								potencialsPoints[ptncIdx[chnl]] = pOffs;
								potencialsLevels[ptncIdx[chnl]] = hitLevel;
								potencialsPointd[ptncIdx[chnl]] = hitPos-pThis;
								ptncIdx[chnl] = ptncIdx[chnl]+1;
							}
						}
					}
				}
			}
		}
	}
	for(int chnl=0;chnl<3;chnl++){
		float Wri = 0;
		//point avg = point(0,0,0);
		float dirfo = 0.001*wri_DirectFalloff[chnl];
		float sidfo = 0.001*wri_SideFalloff[chnl];
		for(int i=ptncIdi[chnl];i<ptncIdx[chnl];i++){
			for(int j=i+1;j<ptncIdx[chnl];j++){
				float raylen = length(potencialsPoints[j]-potencialsPoints[i]);
				float pIlen = length(potencialsPoints[i]);
				float pJlen = length(potencialsPoints[j]);
				float level = max(potencialsLevels[i]*(1.0-pIlen/raylen), potencialsLevels[j]*(1.0-pJlen/raylen));
				level = clamp(level-pow(sidfo*((pIlen+pJlen)-raylen),2),0.0,1.0);
				Wri = max(Wri,level);
			}
			//avg = avg+normalize(potencialsPoints[i])*dirfo;
			if(dirfo>0){
				float potencdit = clamp(potencialsLevels[i]-pow(dirfo*length(potencialsPoints[i]),2),0.0,1.0);
				Wri = max(Wri,potencdit);
			}
		}
		//Wri += length(avg);
		if(chnl == 0){
			WriR = Wri;
		}else if(chnl == 1){
			WriG = Wri;
		}else if(chnl == 2){
			WriB = Wri;
		}
	}
	out_Total = wri_Levels[0]*WriR+wri_Levels[1]*WriG+wri_Levels[2]*WriB;
	out_Normal = nThis;
}
