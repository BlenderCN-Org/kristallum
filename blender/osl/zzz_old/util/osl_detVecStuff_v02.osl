// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf

point project_vec2vec(point projTarget, point pA, point pB)
{
	point p2 = normalize(projTarget);
	point p1 = pA;
	point pC = pB;
	float dl = length(p2 - p1);
	float l2 = pow(dl,2);
	float t = dot(pC - p1, p2 - p1) / l2;
	point proj = p1 + t * (p2 - p1);
	return proj;
}

shader detVecStuff (
	point vec_in = point(0,0,0),
	point vec_axis = point(0,0,0),
	float fac = 1,

	output point vec_rotated = point(0,0,0),
	output point vec_projected = point(0,0,0),
	output point vec_muladded = point(0,0,0),
	output point vec_reflected = point(0,0,0),
	output point vec_tan_p1 = point(0,0,0),
	output point vec_tan_p2 = point(0,0,0)
)
{
	vec_muladded = vec_in+vec_axis*fac;
	if(isconnected(vec_rotated)){
		vec_rotated = rotate(vec_in,fac,point(0,0,0),vec_axis);
	}
	if(isconnected(vec_projected)){
		vec_projected = project_vec2vec(vec_in,point(0,0,0),vec_axis)*fac;
	}
	if(isconnected(vec_reflected)){
		point nrm = normalize(vec_axis);
		point refl = reflect(vec_in, nrm);
		//point refl = vec_in-2*dot(vec_in,nrm)*nrm;
		vec_reflected = mix(vec_in, refl, fac);
	}
	vec_tan_p1 = cross(vec_in,vec_axis);
	vec_tan_p2 = cross(vec_in,vec_tan_p1);
}
