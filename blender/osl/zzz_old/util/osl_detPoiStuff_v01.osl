// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf

point project_vec2vec(point projTarget, point pA, point pB)
{
	point p2 = normalize(projTarget);
	point p1 = pA;
	point pC = pB;
	float dl = length(p2 - p1);
	float l2 = pow(dl,2);
	float t = dot(pC - p1, p2 - p1) / l2;
	point proj = p1 + t * (p2 - p1);
	return proj;
}

point project_p2vec(point p, point pA, point pB)
{
	float dl = length(pA - pB);
	float l2 = pow(dl,2);
	float t = dot(p - pB, pA - pB) / l2;
	//if(t >= 0 && t <= 1){
	point projection = pB + t * (pA - pB);
	//float dist = length(projection-p);
	return projection;
}

shader detPoiStuff (
	point vec_start = point(0,0,0),
	point vec_direction = point(0,0,0),
	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),

	output float out_dist2vec = 0,
	output float out_angl_N = 0,
	output float out_angl_R = 0
)
{
	point pThis = isconnected(in_pos)?in_pos:P;
	point nThis = isconnected(in_nrm)?in_nrm:N;

	point perp1 = cross(vec_direction,point(0,0,1));
	point perp2 = cross(vec_direction,pThis-vec_start);
	out_angl_R = acos(dot(normalize(perp1),normalize(perp2)))/M_PI;

	out_angl_N = acos(dot(nThis,normalize(vec_direction)));
	point projThis = project_p2vec(pThis, vec_start, vec_start+vec_direction);
	out_dist2vec = length(pThis-projThis);
}
