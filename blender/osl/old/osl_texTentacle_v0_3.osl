// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf

#define MAX_POINTS 30

shader texTentacle (
	point start_pos = point(0,0,0),
	point targt_pos = point(0,0,0),
	point start_direction = point(0,1,0),
	point auto_stop_shift = point(999,999,999),
	point steps_min_max_pow = point(3.0,3.0,1.0),
	point steps_size_profile = point(1.0,1.0,1.0),
	point steps_targ_profile = point(0.0,0.0,0.0),
	point step_ang_u_min_max_pow = point(0.0,0.0,1.0),
	point step_ang_v_min_max_pow = point(0.0,0.0,1.0),
	point step_size_min_max_pow = point(0.1,0.1,1.0),
	point step_scale_min_max_pow = point(1.0,1.0,1.0),
	float rnd_seed = 0,
	point in_pos = point(0,0,0),

	output float out_Dst = 0.0,
	output float out_Max = 0.0,
	output float out_Avg = 0.0,
	output point out_Axis = point(0,0,0)
)
{
	point pThis = isconnected(in_pos)?in_pos:P;
	float random_st = noise("usimplex",point(-0.1,rnd_seed,0));
	float steps = steps_min_max_pow[0]+(steps_min_max_pow[1]-steps_min_max_pow[0])*pow(random_st,steps_min_max_pow[2]);
	float points = max(1,min(steps,MAX_POINTS-1));
	float step_ang_u_pow = step_ang_u_min_max_pow[2];
	float step_ang_v_pow = step_ang_v_min_max_pow[2];
	float step_scale_pow = step_scale_min_max_pow[2];
	float size_pow = step_size_min_max_pow[2];
	float st_tr_len = length(targt_pos-start_pos);
	point dots_pos[MAX_POINTS];
	point dots_dir[MAX_POINTS];
	float dots_size[MAX_POINTS];
	for(int i=0;i<points;i++){
		dots_pos[i] = point(0,0,0);
		dots_dir[i] = point(0,0,0);
		float random_si = noise("usimplex",point(i+0.3,rnd_seed,3));
		random_si = step_size_min_max_pow[0]+(step_size_min_max_pow[1]-step_size_min_max_pow[0])*pow(random_si,size_pow);
		dots_size[i] = random_si;
	}
	if(length(start_direction) < 0.001 && st_tr_len>0.001){
		dots_dir[0] = normalize(targt_pos-start_pos);
	}else{
		dots_dir[0] = normalize(start_direction);
	}
	dots_pos[0] = start_pos;
	point perpend;
	if(length(dots_dir[0]-point(0,0,1)) > 0.01){
		perpend = point(0,0,1);//cross(dots_dir[0],point(0,0,1));
	}else{
		perpend = point(1,0,0);//cross(dots_dir[0],point(0,1,0));
	}
	//float full_length = 0.0;
	for(int i=1;i<points;i++){
		float random_u = noise("usimplex",point(i+0.1,rnd_seed,1));
		random_u = step_ang_u_min_max_pow[0]+(step_ang_u_min_max_pow[1]-step_ang_u_min_max_pow[0])*pow(random_u,step_ang_u_pow);
		float random_v = noise("usimplex",point(i+0.2,rnd_seed,2));
		random_v = step_ang_v_min_max_pow[0]+(step_ang_v_min_max_pow[1]-step_ang_v_min_max_pow[0])*pow(random_v,step_ang_v_pow);
		float random_sc = noise("usimplex",point(i+0.4,rnd_seed,4));
		random_sc = step_scale_min_max_pow[0]+(step_scale_min_max_pow[1]-step_scale_min_max_pow[0])*pow(random_sc,step_scale_pow);
		point r1 = rotate(dots_dir[i-1],random_u,point(0,0,0),perpend);
		point r2 = rotate(r1,random_v,point(0,0,0),dots_dir[i-1]);
		dots_dir[i] = normalize(r2);
		float shift = (dots_size[i-1]+dots_size[i])*random_sc;
		dots_pos[i] = dots_pos[i-1]+dots_dir[i]*shift;
		//full_length = full_length+length(dots_pos[i]-dots_pos[i-1]);
		if(fabs(dots_pos[i][0]-dots_pos[0][0])+dots_size[i]>auto_stop_shift[0]
			|| fabs(dots_pos[i][1]-dots_pos[0][1])+dots_size[i]>auto_stop_shift[1]
			|| fabs(dots_pos[i][2]-dots_pos[0][2])+dots_size[i]>auto_stop_shift[2]){
			points = i;
			break;
		}
	}
	// fast check and size post-profile
	int inSideZones = 0;
	for(int i=0;i<points;i++){
		float profilepp = i/(points-1);
		float profilepp_v1 = (profilepp<0.5)?mix(steps_size_profile[0],steps_size_profile[1],profilepp/0.5):mix(steps_size_profile[1],steps_size_profile[2],(profilepp-0.5)/0.5);
		dots_size[i] = dots_size[i]*profilepp_v1;

		if(st_tr_len>0.001){
			float profilepp_v2 = (profilepp<0.5)?mix(steps_targ_profile[0],steps_targ_profile[1],profilepp/0.5):mix(steps_targ_profile[1],steps_targ_profile[2],(profilepp-0.5)/0.5);
			dots_pos[i] = dots_pos[i] + normalize(targt_pos-dots_pos[i])*length(targt_pos-dots_pos[i])*profilepp_v2;
		}

		if(i>0 && length(pThis-dots_pos[i-1])<length(dots_pos[i]-dots_pos[i-1])+dots_size[i]){
			inSideZones++;
		}
	}
	if(inSideZones == 0){
		return;
	}
	float minDist = 0;
	float maxDist = 0;
	float sumDist = 0;
	float sumCount = 1;
	float linecx_prev = 0;
	float linecx = 0;
	float linecy = 0;
	float lineco = 0;
	float linecz = 0;
	if(points>0){
		sumCount = 0;
		for(int i=0;i<points;i++){
			// printf("\n%i. pos=%f %f %f, dir=%f %f %f, size=%f",i,dots_pos[i][0],dots_pos[i][1],dots_pos[i][2],dots_dir[i][0],dots_dir[i][1],dots_dir[i][2],dots_size[i]);
			float dist = length(pThis-dots_pos[i])/dots_size[i];
			float ttdist = 1.0-dist;
			if(dist < minDist || minDist<0.001){
				minDist = dist;
			}
			sumDist = sumDist+linearstep(0,1,ttdist);
			sumCount = sumCount+1;
			if(ttdist >= 0.0){
				if(ttdist > maxDist){
					maxDist = ttdist;
				}
			}
			if(i>0){
				float linecx_here = 0;
				point projection = pThis;
				float isInsideArm = 0;
				float d1 = length(pThis-dots_pos[i]);
				float d2 = length(pThis-dots_pos[i-1]);
				if(d1<dots_size[i]){
					linecy = max(linecy,1-d1/dots_size[i]);
					projection = dots_pos[i];
					isInsideArm = isInsideArm+1;
				}
				if(d2<dots_size[i-1]){
					linecy = max(linecy,1-d2/dots_size[i-1]);
					projection = dots_pos[i-1];
					isInsideArm = isInsideArm+1;
				}
				float dl = length(dots_pos[i] - dots_pos[i-1]);
				float l2 = pow(dl,2);
				float t = dot(pThis - dots_pos[i-1], dots_pos[i] - dots_pos[i-1]) / l2;
				if(t >= 0 && t <= 1){
					projection = dots_pos[i-1] + t * (dots_pos[i] - dots_pos[i-1]);
					float dist = length(projection-pThis);
					float ideal_dist = mix(dots_size[i-1],dots_size[i],t);
					if(dist<ideal_dist){
						linecx_here = dl*t;
						isInsideArm = isInsideArm+1;
						linecy = max(linecy,1.0-dist/ideal_dist);
					}
				}else if(isInsideArm>0){
					if(t<0){
						linecx_here = dl*t;
					}else if(i+1>=points){
						linecx_here = dl*t;
					}
				}
				lineco = lineco+isInsideArm;
				linecz = max(linecz, linearstep(0.0,1.0, linecy
					- (1.0-linearstep(0.0,1.0,d1/dots_size[i]*linecy))
					- (1.0-linearstep(0.0,1.0,d2/dots_size[i-1]*linecy))
				));
				if(isInsideArm>0){
					linecx = (linecx_prev+linecx_here);
				}
				linecx_prev = max(linecx_prev,linecx_prev+dl);
			}
		}
		linecx_prev = linecx_prev+dots_size[int(points)-1];
	}
	if(lineco>0){
		out_Axis = point(clamp(1.0-linecx/linecx_prev,0,1),linecy,linecz);
	}
	out_Dst = minDist;
	out_Max = maxDist;
	out_Avg = sumDist/sumCount;
}
