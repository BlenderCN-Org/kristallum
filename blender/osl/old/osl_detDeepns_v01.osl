
shader detDeepn (
	point normal_scale = point(-1,-1,-1),
	point normal_offset = point(0,0,0),
	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),
	string deep_namePostfx = "", // Name postfixes, delimited with ",". Deepness will be measured till proper object met

	output float out_thickness = 0,
	output point out_thicknessP = point(0,0,0),
	output float out_deepness = 0,
	output point out_deepnessP = point(0,0,0)
)
{
	point pThis = isconnected(in_pos)?in_pos:P;
	point nThis = isconnected(in_nrm)?in_nrm:N;

	string thisId;
	getattribute("geom:name",thisId);
	point secdir = normalize(nThis*normal_scale+normal_offset);
	string hitId;
	point pCurr = pThis;
	point pSideHit = pThis;
	point pSideHit2 = pThis;

	int namepartcc = 0;
	string nameparts[10];
	if(strlen(deep_namePostfx) > 0){
		namepartcc = split(deep_namePostfx, nameparts, ",", 10);
	}
	for(int skipcc = 0;skipcc<5;skipcc++){
		int isHit = trace(pCurr+0.0001*secdir, secdir);
		getmessage("trace","geom:name",hitId);
		if(isHit > 0 && hitId == thisId){
			getmessage("trace","P",pSideHit);
		}else{
			if(isHit == 0){
				break;
			}
			if(hitId != thisId){
				for(int i=0;i<namepartcc;i++){
					if(endswith(hitId,nameparts[i]) > 0){
						namepartcc = 0;
						break;
					}
				}
				if(namepartcc == 0){
					getmessage("trace","P",pSideHit2);
					break;
				}
			}
		}
		getmessage("trace","P",pCurr);
	}

	out_thicknessP = pSideHit;
	out_deepnessP = pSideHit2;
	out_thickness = length(pThis-out_thicknessP);
	out_deepness = length(pThis-out_deepnessP);
}
