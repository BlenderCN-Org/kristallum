// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html

// Wrinkles-objects should have special prefix
#define WRI_OBJECT_PREFIX "wri_"

shader charWriDpn (
    float base_Level = 0.5,
    point base_Rad_StepsU_StepsV = point(1.0, 0, 0),
    string wri_ObjPrefix = "",

    point wri_Min_Max_Blend = point(-0.3, 0.3, 0.05),
    float wri_Level = 0.0,

    point in_pos = point(0,0,0),
    point in_nrm = point(0,0,0),

    output float out_Level = 0.0,
    output point out_Normal = 0.0,
	output float Wri = 0.0,
	output float Wri_ndt = 0.0,
	output point Wri_grd = point(0,0,0),
){
    float wriMin = wri_Min_Max_Blend[0];
    float wriMax = wri_Min_Max_Blend[1];
    float wriBlendDst = wri_Min_Max_Blend[2];

    float testWidth = base_Rad_StepsU_StepsV[0];
    float testStepU = 1/max(1,base_Rad_StepsU_StepsV[1]);
    float testStepV = 1/max(1,base_Rad_StepsU_StepsV[2]);

    point pThis = length(in_pos)>0?in_pos:P;
    point nThis = length(in_nrm)>0?in_nrm:N;

    string thisId;
    getattribute("geom:name",thisId);
    point pCamWrl = point("camera", 0, 0, 0);
    int isHit = 0;
    string hitId;
    string WOP = wri_ObjPrefix;
    if(strlen(WOP)<3){
        WOP = WRI_OBJECT_PREFIX;
    }

	point pSideHit;
    point nSideHit;
    float wriDist = 0;
    point wriNrm = nThis;
    point wriPos = pThis;
	point wriVertx[3];
	getattribute("geom:trianglevertices",wriVertx);
    if(fabs(wri_Level) > 0.001){
        if(startswith(thisId,WOP) > 0){
            point pCurr = pThis;
            for(int skipcc = 0;skipcc<5;skipcc++){
                isHit = trace(pCurr-nThis*0.00001, -nThis);
                getmessage("trace","geom:name",hitId);
                getmessage("trace","P",pSideHit);
                getmessage("trace","N",nSideHit);
                if(isHit > 0 && startswith(hitId,WOP) > 0){
                    // ignoring wri intersections!
                    wriDist = wriDist+length(pCurr-pSideHit);
                    pCurr = pSideHit;
                }else{
                    break;
                }
            }
            if(isHit > 0 && startswith(hitId,WOP) < 1){
                wriDist = wriDist+length(pCurr-pSideHit);
                wriDist = wriDist/wriMax;
                nThis = mix(nSideHit,nThis,clamp(wriDist,0,1));
            }else{
                wriDist = 0;
            }
        }else
        {
            float testTotalLt = 0;
            float testWriDist = 0;
            point ltDirN1 = -nThis;//-I;
            point perpend1 = cross(nThis,point(0,0,1));
			float iis = 1;
			float jjs = 1;
            for(float ii=0; ii<1; ii = ii+testStepU){
                float xi=mix(0, testWidth, ii)*iis;
				iis = -1*iis;
                point ltDirN2 = rotate(ltDirN1,xi,point(0,0,0),perpend1);
                for(float jj=0; jj<1; jj = jj+testStepV){
                    float yi=mix(0, testWidth, jj)*jjs;
					jjs = -1*jjs;
                    point ltDirN3 = rotate(ltDirN2,yi,point(0,0,0),nThis);

                    testTotalLt = testTotalLt+1;
                    wriDist = 0;
                    point pCurr = pThis;
                    point pCurrN = ltDirN3;
                    for(int skipcc = 0;skipcc<5;skipcc++){
                        isHit = trace(pCurr+pCurrN*0.00001, pCurrN);
                        getmessage("trace","geom:name",hitId);
                        getmessage("trace","P",pSideHit);
						getmessage("trace","N",nSideHit);
                        if(isHit > 0 && startswith(hitId,WOP) < 1){
                            // ignoring non-wri intersections!
                            wriDist = wriDist+length(pCurr-pSideHit);
                            pCurr = pSideHit;
                        }else{
                            break;
                        }
                    }
                    if(isHit > 0 && startswith(hitId,WOP) > 0){
                        wriDist = wriDist+length(pCurr-pSideHit);
                        if(ii < 0.0001 && jj < 0.0001){
							getmessage("trace","geom:trianglevertices",wriVertx);
                            wriPos = pSideHit;
                            wriNrm = nSideHit;
                        }
                    }else{
                        wriDist = 0;
                    }
                    testWriDist = testWriDist+wriDist;
					if(fabs(ii)<0.0001){
						break;
					}
                }
            }
            wriDist = (testWriDist/testTotalLt)/wriMin;
            //point pCurr = pThis;
            //point pCurrN = -nThis;//-I;
            //for(int skipcc = 0;skipcc<5;skipcc++){
            //    isHit = trace(pCurr+pCurrN*0.00001, pCurrN);
            //    getmessage("trace","geom:name",hitId);
            //    getmessage("trace","P",pSideHit);
            //    getmessage("trace","Ng",nSideHit);
            //    if(isHit > 0 && startswith(hitId,WOP) < 1){
            //        // ignoring non-wri intersections!
            //        wriDist = wriDist+length(pCurr-pSideHit);
            //        pCurr = pSideHit;
            //    }else{
            //        break;
            //    }
            //}
            //if(isHit > 0 && startswith(hitId,WOP) > 0){
            //    wriDist = wriDist+length(pCurr-pSideHit);
            //    wriDist = wriDist/wriMin;
            //    wriPos = pSideHit;
            //    wriNrm = nSideHit;
            //}else{
            //    wriDist = 0;
            //}
        }
        if(fabs(wriDist) > 0.000001){
            // wriDist already normalized!
            if(wriDist >= 1.0 || wriDist <= -1.0){
                wriDist = 0;
            }
            // Finalizing normalization
            wriDist = sign(wriDist)*linearstep(wriBlendDst,1,fabs(wriDist));
        }
    }
	float wvx1 = min(min(wriVertx[0][0],wriVertx[1][0]),wriVertx[2][0]);
	float wvx2 = max(max(wriVertx[0][0],wriVertx[1][0]),wriVertx[2][0]);
	float wvy1 = min(min(wriVertx[0][1],wriVertx[1][1]),wriVertx[2][1]);
	float wvy2 = max(max(wriVertx[0][1],wriVertx[1][1]),wriVertx[2][1]);
	float wvz1 = min(min(wriVertx[0][2],wriVertx[1][2]),wriVertx[2][2]);
	float wvz2 = max(max(wriVertx[0][2],wriVertx[1][2]),wriVertx[2][2]);
	Wri_grd = point((wriPos[0]-wvx1)/(wvx2-wvx1),(wriPos[1]-wvy1)/(wvy2-wvy1),(wriPos[2]-wvz1)/(wvz2-wvz1));
	Wri_ndt = dot(nThis, wriNrm);

	Wri = wriDist;
    out_Level = base_Level+wriDist*wri_Level;
    out_Normal = nThis;
}
