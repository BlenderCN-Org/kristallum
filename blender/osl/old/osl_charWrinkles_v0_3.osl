// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html

#define WRI_VERTEXCOL_NAME "WriLevel"
//#define WRI_VERTEXTRT_NAME "WriTrait"
#define MAXCACHE 20
#define MAXCHL(cl) (max(max(cl[0],cl[1]),cl[2]))
#define ISWHITE(cl) (fabs(cl[0]-cl[1])<=0.1 && fabs(cl[0]-cl[2])<=0.1 && fabs(cl[0]) >= 0.1)
#define ISRED(cl) (fabs(cl[0])>=0.1 && fabs(cl[1])<=0.1 && fabs(cl[2]) <= 0.1)
#define ISGREEN(cl) (fabs(cl[1])>=0.1 && fabs(cl[0])<=0.1 && fabs(cl[2]) <= 0.1)
#define ISBLUE(cl) (fabs(cl[2])>=0.1 && fabs(cl[0])<=0.1 && fabs(cl[1]) <= 0.1)

shader charWri (
	point base_Frac_Steps = point(0.003, 0, 2),
	point wri_Levels = point(-1,0,1),
	float wri_BlurDistance = 0.03,

	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),
	color in_coltrait = color(0,0,0),
	color in_colmap = color(0,0,0),
	string name_ColMap = "",

	output float out_Total = 0.0,
	output point wri_ColorMap = point(0,0,0)
){
	point rbtPixels = transform("raster", point("NDC", 1,1,0));
	float baseResolution = min(rbtPixels[0],rbtPixels[1]);
	float pixelWidth = baseResolution*base_Frac_Steps[0];

	string vcname = name_ColMap;
	if(strlen(vcname)<3){
		vcname = WRI_VERTEXCOL_NAME;
	}

	color vcColMap1 = in_colmap;
	color vcColTraits1 = in_coltrait;
	point pThis = length(in_pos)>0?in_pos:P;
	point nThis = length(in_nrm)>0?in_nrm:N;
	point pCamWrl = point("camera", 0, 0, 0);
	point pThisRST = transform("raster", pThis);

	//float wriDist = 0;
	//string vtname = name_TraitMap;
	//if(strlen(vtname)<3){
	//	vtname = WRI_VERTEXTRT_NAME;
	//}
	//if(MAXCHL(vcColTraits1)>0){
	//	int isHit = 0;
	//	color hitColMap;
	//	point pSideHit;
	//	point nSideHit;
	//	point pCurr = pThis;
	//	for(int skipcc = 0;skipcc<5;skipcc++){
	//		isHit = trace(pCurr, -nThis);
	//		getmessage("trace",vtname,hitColMap);
	//		getmessage("trace","P",pSideHit);
	//		if(isHit > 0 && MAXCHL(hitColMap)>0){
	//			// ignoring wri intersections!
	//			wriDist = wriDist+length(pCurr-pSideHit);
	//			pCurr = pSideHit-nThis*0.00001;
	//		}else{
	//			break;
	//		}
	//	}
	//	if(isHit > 0 && MAXCHL(hitColMap) < 0.1){
	//		getmessage("trace","P",pSideHit);
	//		getmessage("trace","N",nSideHit);
	//		wriDist = wriDist+length(pCurr-pSideHit);
	//		nThis = nSideHit;
	//	}
	//}
	//out_Normal = nThis;

	color vcColMapHi = vcColMap1;
	color vcColMapLo = 1.0-vcColMap1;
	float wri_LevelBlend = vcColTraits1[0];
	float wri_LevelBlurHi = vcColTraits1[1];
	float wri_LevelBlurLo = vcColTraits1[2];
	float wri_BlurDistHi = wri_BlurDistance*wri_LevelBlurHi;
	float wri_BlurDistLo = wri_BlurDistance*wri_LevelBlurLo;
	int anglesSet = 0;
	point potencHiPoin2d[ MAXCACHE ];
	point potencHiPoin3d[ MAXCACHE ];
	point potencHiLevels[ MAXCACHE ];
	point potencLoPoin2d[ MAXCACHE ];
	point potencLoPoin3d[ MAXCACHE ];
	point potencLoLevels[ MAXCACHE ];
	if(fabs((wri_BlurDistHi+wri_BlurDistLo)*wri_LevelBlend*pixelWidth) > 0.001){
		for(int i=0;i<MAXCACHE;i++){
			potencHiPoin2d[i]=point(0,0,0);
			potencHiPoin3d[i]=point(0,0,0);
			potencHiLevels[i]=point(-1,-1,-1);
			potencLoPoin2d[i]=point(0,0,0);
			potencLoPoin3d[i]=point(0,0,0);
			potencLoLevels[i]=point(-1,-1,-1);
		}
		float testStep = 1;
		float testWidth = pixelWidth;
		if(base_Frac_Steps[2]>0){
			testStep = base_Frac_Steps[2]*1/(2*testWidth);
		}else{
			testStep = max(0.01,1/base_Frac_Steps[1]);
		}
		for(float ii=0; ii<1; ii = ii+testStep){
			float xi=mix(-testWidth,testWidth, ii);
			for(float jj=0; jj<1; jj = jj+testStep){
				float yi=mix(-testWidth,testWidth, jj);
				point pOffs = point(xi,yi,0);
				int anglIdx = int(MAXCACHE*(atan2(pOffs[1],pOffs[0])+M_PI)/M_2PI);

				point pSideRst = pThisRST+pOffs;
				point pSideWlr = transform("raster", "world", pSideRst);
				int isHit = trace(pCamWrl, pSideWlr-pCamWrl);
				if(isHit > 0){
					point hitPos = point(0,0,0);
					color hitColor = color(0,0,0);
					getmessage("trace", vcname, hitColor);
					getmessage("trace", "P", hitPos);
					//if(ISWHITE(hitColor)){
					//	// Transparent, for wrappers
					//	continue;
					//}
					if(MAXCHL(hitColor) >= MAXCHL(vcColMapHi)){
						if(MAXCHL(potencHiLevels[anglIdx]) < 0 || length(pOffs) < length(potencHiPoin2d[anglIdx])){
							anglesSet = anglesSet+1;
							potencHiPoin2d[anglIdx] = pOffs;
							potencHiPoin3d[anglIdx] = hitPos-pThis;
							potencHiLevels[anglIdx] = point(hitColor[0],hitColor[1],hitColor[2]);
						}
					}
					if(MAXCHL(1.0-hitColor) >= MAXCHL(vcColMapLo)){
						if(MAXCHL(potencLoLevels[anglIdx]) < 0 || length(pOffs) < length(potencLoPoin2d[anglIdx])){
							anglesSet = anglesSet+1;
							potencLoPoin2d[anglIdx] = pOffs;
							potencLoPoin3d[anglIdx] = hitPos-pThis;
							potencLoLevels[anglIdx] = 1.0-point(hitColor[0],hitColor[1],hitColor[2]);
						}
					}
				}
			}
		}
	}

	point vcColMapOut = vcColMap1;
	if(anglesSet>0){
		point summHiLevel = point(0,0,0);
		float summHiMinDist = 0;
		float summHiLevelCc = 0;
		point summLoLevel = point(0,0,0);
		float summLoMinDist = 0;
		float summLoLevelCc = 0;
		for(int i=0;i<MAXCACHE;i++){
			if(wri_BlurDistHi > 0.001 && MAXCHL(potencHiLevels[i]) >= 0 && MAXCHL(potencHiLevels[i]) >= MAXCHL(vcColMapHi)){
				float pIlen = length(potencHiPoin2d[i])*0.003;
				//float pIlen = length(potencHiPoin3d[i]);
				point currMinDist = (potencHiLevels[i]-vcColMapHi)*clamp(1.05-pIlen/wri_BlurDistHi,0,1);
				if(MAXCHL(currMinDist) >= summHiMinDist){
					summHiMinDist = MAXCHL(currMinDist);
					summHiLevel = vcColMapHi+currMinDist;
					summHiLevelCc = summHiLevelCc+1;
				}
			}
			if(wri_BlurDistLo > 0.001 && MAXCHL(potencLoLevels[i]) >= 0 && MAXCHL(potencLoLevels[i]) >= MAXCHL(vcColMapLo)){
				float pIlen = length(potencLoPoin2d[i])*0.003;
				//float pIlen = length(potencLoPoin3d[i]);
				point currMinDist = (potencLoLevels[i]-vcColMapLo)*clamp(1.05-pIlen/wri_BlurDistLo,0,1);
				if(MAXCHL(currMinDist) >= summLoMinDist){
					summLoMinDist = MAXCHL(currMinDist);
					summLoLevel = vcColMapLo+currMinDist;
					summLoLevelCc = summLoLevelCc+1;
				}
			}
		}
		float avgCc = 0;
		vcColMapOut = point(0,0,0);
		if(summHiLevelCc > 0){
			vcColMapOut = vcColMapOut+summHiLevel;
			avgCc = avgCc+1;
		}
		if(summLoLevelCc > 0){
			vcColMapOut = vcColMapOut+(1.0-summLoLevel);
			avgCc = avgCc+1;
		}
		if(avgCc>0){
			vcColMapOut = vcColMapOut/avgCc;
		}else{
			vcColMapOut = vcColMap1;
		}
	}
	float summary = wri_Levels[0]*vcColMapOut[0]+wri_Levels[1]*vcColMapOut[1]+wri_Levels[2]*vcColMapOut[2];
	out_Total = summary*wri_LevelBlend;
	wri_ColorMap = vcColMap1;
}
