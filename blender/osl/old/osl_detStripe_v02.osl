shader detStripe (
    point base_Rad_Steps_Elev = point(1.0, 7, 0.1),
	point flow_Dir = point(0,0,1),

	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),

	output float out_Level = 0.0,
	output float out_Mid = 0.0,
	output point out_Flow = point(0,0,0)
)
{
	float testWidthRadians = base_Rad_Steps_Elev[0];
	float testStepsU = 1/max(1,base_Rad_Steps_Elev[1]);
	float testStepsV = testStepsU;//1/max(1,base_Rad_Steps_Elev[2]);
	float traceElevation = base_Rad_Steps_Elev[2];

	string thisId;
	getattribute("geom:name",thisId);
	point pThis = isconnected(in_pos)?in_pos:P;
	point nThis = isconnected(in_nrm)?in_nrm:N;
	point pMainFlow = normalize(flow_Dir);
	point pTraceRoot = pThis+nThis*traceElevation;
	point nTraceDir = -nThis;
	point pTracePerp = cross(nThis,point(0,0,1));

	float xHits = 0;
	point xFlow = point(0,0,0);
	float xLevel = 0;
	float xMid = 0;

	float triagId = 0;
	float triagIdHit = 0;
	float triagLevel = 0;
	for(float ii=0; ii<1; ii = ii+testStepsU){
		float r1=mix(0, M_2PI, ii);
		point pTracePerp2 = rotate(pTracePerp,r1,point(0,0,0),nThis);
		for(float jj=0; jj<1; jj = jj+testStepsV){
			point triagVertx[3];
			point pSideHit;
			int okHit = 0;
			if(ii < 0.001 && jj < 0.001){
				pSideHit = pThis;
				getattribute("geom:trianglevertices",triagVertx);
				triagId = triagVertx[0][0]+triagVertx[0][1]+triagVertx[0][2]
					+triagVertx[1][0]+triagVertx[1][1]+triagVertx[1][2]
					+triagVertx[2][0]+triagVertx[2][1]+triagVertx[2][2];
				okHit=2;
			}else{
				float r2=mix(0, testWidthRadians, jj);
				point nTraceDir2 = rotate(nTraceDir,r2,point(0,0,0),pTracePerp2);
				int isHit = trace(pTraceRoot, nTraceDir2);
				if(isHit > 0){
					string hitId;
					getmessage("trace","geom:name",hitId);
					getmessage("trace","geom:trianglevertices",triagVertx);
					triagIdHit = triagVertx[0][0]+triagVertx[0][1]+triagVertx[0][2]
						+triagVertx[1][0]+triagVertx[1][1]+triagVertx[1][2]
						+triagVertx[2][0]+triagVertx[2][1]+triagVertx[2][2];
					if(hitId == thisId){
						getmessage("trace","P",pSideHit);
						okHit=1;
					}
				}
			}

			if(okHit > 0){
				point pV0RST = triagVertx[0];//transform("raster", triagVertx[0]);
				point pV1RST = triagVertx[1];//transform("raster", triagVertx[1]);
				point pV2RST = triagVertx[2];//transform("raster", triagVertx[2]);

				float d1 = min(acos(dot(normalize(pV0RST-pV1RST),pMainFlow)),acos(dot(normalize(pV1RST-pV0RST),pMainFlow)));
				float d2 = min(acos(dot(normalize(pV1RST-pV2RST),pMainFlow)),acos(dot(normalize(pV2RST-pV1RST),pMainFlow)));
				float d3 = min(acos(dot(normalize(pV2RST-pV0RST),pMainFlow)),acos(dot(normalize(pV0RST-pV2RST),pMainFlow)));

				float d = d1;
				point closestVetrx1 = triagVertx[0];
				point closestVetrx2 = triagVertx[1];//d1
				point closestVetrx3 = triagVertx[2];
				if(d2 < d){
					d = d2;
					closestVetrx1 = triagVertx[1];
					closestVetrx2 = triagVertx[2];//d2
					closestVetrx3 = triagVertx[0];
				}
				if(d3 < d){
					d = d3;
					closestVetrx1 = triagVertx[2];
					closestVetrx2 = triagVertx[0];//d3
					closestVetrx3 = triagVertx[1];
				}
				float sided1 = length(closestVetrx3-closestVetrx1);
				float sided2 = length(closestVetrx3-closestVetrx2);
				float sidesize = sided1;
				point ppFlow = normalize(closestVetrx3-closestVetrx1);
				if(sided2<sidesize){
					sidesize = sided2;
					ppFlow = normalize(closestVetrx3-closestVetrx2);
				}
				point dist2ndr1 = cross(closestVetrx2-pThis, closestVetrx2-closestVetrx1);
				float dist2pln1 = length(dist2ndr1)/length(closestVetrx2-closestVetrx1);
				float ppLevel = dist2pln1/sidesize;
				if(dot(normalize(closestVetrx2-closestVetrx1),pMainFlow)<dot(normalize(closestVetrx1-closestVetrx2),pMainFlow)){
					// reversed triangle
					ppLevel = 1.0-ppLevel;
					ppFlow = -1*ppFlow;
				}
				float weight = (1.0 - jj);
				if(okHit == 2){
					triagLevel = ppLevel;
				}
				if(fabs(triagIdHit-triagId) >= 0.01){
					if(fabs(ppLevel-triagLevel) < 0.5){
						weight = weight * 2;
					}else{
						weight = weight * (2-(fabs(ppLevel-triagLevel)-0.5)/0.5);
					}
				}
				float ppMid = ppLevel<=0.5?ppLevel/0.5:((1.0-ppLevel)/0.5);
				xFlow = xFlow+ppFlow*weight;
				xLevel = xLevel+ppLevel*weight;
				xMid = xMid+ppMid*weight;
				xHits = xHits+weight;
			}
		}
	}

	if(xHits>0){
		out_Flow = xFlow/xHits;
		out_Level = xLevel/xHits;
		out_Mid = xMid/xHits;
	}
}
