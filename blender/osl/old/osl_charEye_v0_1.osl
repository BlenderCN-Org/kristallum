// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html

#define BASKEDGE_HRDN 0.90

shader charMat (
    point back_w1_w2_Hrdn = point(0.0, 0.6, 0.3),
    point eye_WMain_WOuter_WInner = point(0.9, 0.909, 0.99),
    point eye_Iris = point(20, 0, 0),
    point eyeB1_Z_Mul_Pow = point(7, 0.5, 50),
    point eyeB2_Z_Mul_Pow = point(30, 2.0, 5),

    point cameraViewOffset = point(0,0,0),
    point spark1_X_Y_W = point(-1.1,0.9,0.01),
    point spark2_X_Y_W = point(-0.4,2.1,0.005),
    point spark3_X_Y_W = point(-1.1,0.7,0.003),

    output float backSide = 0.0,
	output float frontSide = 0.0,
    output float eyeBall = 0.0,
    output float spark = 0.0,
    output float rampMap = 0.0)
{
    float eyeWidth = eye_WMain_WOuter_WInner[0];
    float eyeWidthO = eye_WMain_WOuter_WInner[1];
    float eyeWidthI = eye_WMain_WOuter_WInner[2];
    float eyeIris = eye_Iris[0];
    float eyeB1Z = eyeB1_Z_Mul_Pow[0]/100;
	float eyeB1Mul = eyeB1_Z_Mul_Pow[1];
    float eyeB1Pow = eyeB1_Z_Mul_Pow[2];
    float eyeB2Z = eyeB2_Z_Mul_Pow[0]/100;
	float eyeB2Mul = eyeB2_Z_Mul_Pow[1];
    float eyeB2Pow = eyeB2_Z_Mul_Pow[2];

    float backWidth1 = back_w1_w2_Hrdn[0];
    float backWidth2 = back_w1_w2_Hrdn[1];
    float backHardness = back_w1_w2_Hrdn[2];
    float spark1X = spark1_X_Y_W[0];
    float spark1Y = spark1_X_Y_W[1];
    float spark1W = spark1_X_Y_W[2];
    float spark2X = spark2_X_Y_W[0];
    float spark2Y = spark2_X_Y_W[1];
    float spark2W = spark2_X_Y_W[2];
    float spark3X = spark3_X_Y_W[0];
    float spark3Y = spark3_X_Y_W[1];
    float spark3W = spark3_X_Y_W[2];

	point pThis = P;
    point nThisR = N;
    point pCamWrl = point("camera", 0, 0, 0);
    float distBase = length(pCamWrl-pThis);
    point pThisCenter = transform("object", "common", point(0,0,0));
    point pThisYAxis = transform("object", "common", point(0,1,0));
	point nThis = normalize(pThis-pThisCenter);
    point nBack = normalize(pThisYAxis-pThisCenter);
    point viewDirection = pCamWrl-pThisCenter;
    viewDirection[2] = 0;
    viewDirection = viewDirection+cameraViewOffset;
    point nView = normalize(viewDirection);

    // whiteback
    float viewOtklonenie = dot(nThisR,nBack);
    backSide = 0;
    if(viewOtklonenie > backWidth1){
        if(viewOtklonenie < backWidth2){
            backSide = clamp((viewOtklonenie-backWidth1)/(backWidth2-backWidth1)*(1-backHardness),0,BASKEDGE_HRDN);
        }else{
            backSide = BASKEDGE_HRDN;
        }
    }

    // sparkles
    point spark1dir = rotate(nThisR,spark1X,point(0,0,0),point(0,0,1));
    spark1dir = rotate(spark1dir,spark1Y,point(0,0,0),nThisR);
    float spark1Otklonenie = (dot(spark1dir,nBack));

    point spark2dir = rotate(nThisR,spark2X,point(0,0,0),point(0,0,1));
    spark2dir = rotate(spark2dir,spark2Y,point(0,0,0),nThisR);
    float spark2Otklonenie = (dot(spark2dir,nBack));

    point spark3dir = rotate(nThisR,spark3X,point(0,0,0),point(0,0,1));
    spark3dir = rotate(spark3dir,spark3Y,point(0,0,0),nThisR);
    float spark3Otklonenie = (dot(spark3dir,nBack));

    spark = 0;
    if(spark1Otklonenie >= (1.0-spark1W)
        || spark2Otklonenie >= (1.0-spark2W)
        || spark3Otklonenie >= (1.0-spark3W)){
       spark = 1;

    }

    // eye
    float eyeOtklonenie = fabs(dot(nThis,nView));
    frontSide = 0.0;
    eyeBall = 0.0;
    if(eyeOtklonenie > eyeWidth){
        if(eyeOtklonenie > eyeWidthI){
            frontSide = 1;
        }else if(eyeOtklonenie < eyeWidthO){
            frontSide = 1;
        }else{
            float midlfac = (eyeOtklonenie-eyeWidthO)/(eyeWidthI-eyeWidthO);
            midlfac = (0.1-pow(midlfac-0.55,2))*7;
            midlfac = pow(clamp(midlfac,0.001,1),2);

            float eyePointoUnspr = 1;
            if(eyeIris > 0){
                point eyeCenter = pThisCenter+nView*length(pThis-pThisCenter);
                point eyePointo = (pThis - eyeCenter);
                float eyePointoAngle = dot(eyePointo,point(1,0,0))/length(eyePointo);
                eyePointoUnspr = pow(sin(eyePointoAngle*eyeIris)+1.5,1.3);
            }

            float viewOtklonenie1 = 0;
            if(eyeB1Pow > 0){
                point nThisSplushed1 = normalize(point(0,nThis[1],nThis[2]-eyeB1Z));
                point nViewSplushed1 = normalize(point(0,nView[1],nView[2]));
                viewOtklonenie1 = fabs(dot(nThisSplushed1,nViewSplushed1));
                viewOtklonenie1 = clamp(viewOtklonenie1-0.5,0,0.5)*2;
                viewOtklonenie1 = pow(viewOtklonenie1,eyeB1Pow)*eyeB1Mul;
            }

            float viewOtklonenie2 = 0;
            if(eyeB2Pow > 0){
                point nThisSplushed2 = normalize(point(0,nThis[1],nThis[2]-eyeB2Z));
                point nViewSplushed2 = normalize(point(0,nView[1],nView[2]));
                viewOtklonenie2 = fabs(dot(nThisSplushed2,nViewSplushed2));
                viewOtklonenie2 = clamp(viewOtklonenie2-0.5,0,0.5)*2;
                viewOtklonenie2 = pow(viewOtklonenie2,eyeB2Pow)*eyeB2Mul;
            }

            midlfac = midlfac*eyePointoUnspr;
            midlfac = midlfac-(viewOtklonenie1+viewOtklonenie2);

            eyeBall = clamp(midlfac,0.00001,1);
        }
    }

    rampMap = 0;
    if(spark > 0){
        rampMap = 1.0;
    }else if(frontSide > 0){
        rampMap = 0.0;
    }else
    if(eyeBall > 0.0){
        rampMap = 0.05 + eyeBall*(0.8-0.05);
    }else{
        rampMap = 0.9 + backSide*0.1;
    }
}
