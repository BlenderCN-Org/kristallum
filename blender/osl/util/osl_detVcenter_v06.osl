// "NDC" ignores aspect ratio
// "raster"/"screen"

#define OUTPUT2D_COORD "raster"
void make_orthonormals(vector N, output vector a, output vector b)
{
	if(N[0] != N[1] || N[0] != N[2]) a = cross(vector(1, 1, 1), N);
	else a = cross(vector(-1, 1, 1), N);

	a = normalize(a);
	b = cross(N, a);
}

shader detVolcen (
	point baked_offset = point(0.0,0.0,0.0),
	point baked_global = point(0.0,0.0,0.0),

	float baked_maxdimension_3d = 0.0,
	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),

	output point vol_Center = point(0,0,0),
	output point vol_decar2D = point(0,0,0),
	output point vol_decar3D = point(0,0,0),
	output point vol_polar2D = point(0,0,0),
	output point vol_polar3D = point(0,0,0),
	output point out_thisP = point(0,0,0),
	output point out_dupliP = point(0,0,0)
)
{
	point pThis = isconnected(in_pos)?in_pos:P;
	point nThis = isconnected(in_nrm)?in_nrm:N;
	vol_Center = pThis+baked_offset;
	if(isconnected(baked_global)){
		vol_Center = baked_global;//transform("object", "common", baked_local);
	}

	point pCamWrl = point("camera", 0, 0, 0);
	point pThisRST = transform(OUTPUT2D_COORD, pThis);
	point pnThisRST = transform(OUTPUT2D_COORD, pThis+nThis);
	point vol_CenterRST = transform(OUTPUT2D_COORD, vol_Center);
	float len2d = length(vol_CenterRST-pThisRST);
	float len3d = length(vol_Center-pThis);
	vol_decar3D = pThis-vol_Center;
	vol_decar2D = pThisRST-vol_CenterRST;
	if(baked_maxdimension_3d>0){
		vol_decar3D = vol_decar3D/baked_maxdimension_3d;
		vector view_perpen, B;
		make_orthonormals(pCamWrl-vol_Center, view_perpen, B);
		//point view_perpen = cross(normalize(pCamWrl-vol_Center),point(0,0,1));
		point view_maxpptRST = transform(OUTPUT2D_COORD, vol_Center+view_perpen*baked_maxdimension_3d);
		float baked_maxdimension_2d = length(view_maxpptRST-vol_CenterRST);
		vol_decar2D = vol_decar2D/baked_maxdimension_2d;

		len3d = len3d/baked_maxdimension_3d;
		len2d = len2d/baked_maxdimension_2d;
	}
	vol_polar3D = point(len3d, acos(dot(normalize(pThis-vol_Center),point(0,0,1))),
						acos(dot(nThis,point(0,0,1))));
	vol_polar2D = point(len2d, acos(dot(normalize(pThisRST-vol_CenterRST),point(0,1,0))),
						acos(dot(normalize(pnThisRST-pThisRST),point(0,1,0))));
	out_thisP = pThis;
	out_dupliP = vol_Center;
	getattribute("object:location",out_dupliP);
	//getattribute("geom:dupli_generated",out_dupliP);
}
