#define OUTPUT2D_COORD "raster"
void make_orthonormals(vector N, output vector a, output vector b)
{
	if(N[0] != N[1] || N[0] != N[2]) a = cross(vector(1, 1, 1), N);
	else a = cross(vector(-1, 1, 1), N);

	a = normalize(a);
	b = cross(N, a);
}

shader detFlacen (
	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),

	output point vol_Center = point(0,0,0),
	output point vol_decar2D = point(0,0,0),
	output point vol_decar3D = point(0,0,0),
	output point vol_polar2D = point(0,0,0),
	output point vol_polar3D = point(0,0,0)
)
{
	point pThis = isconnected(in_pos)?in_pos:P;
	point nThis = isconnected(in_nrm)?in_nrm:N;

	point triagVertx[3];
	getattribute("geom:trianglevertices",triagVertx);
	float vol_alen_1_2 = length(triagVertx[1]-triagVertx[2]);
	float vol_alen_2_0 = length(triagVertx[2]-triagVertx[0]);
	float vol_alen_1_0 = length(triagVertx[1]-triagVertx[0]);

	// v0
	float vol_alen = vol_alen_1_2;
	vol_Center = triagVertx[0];
	float edgedist = length(triagVertx[0]-pThis)/mix(vol_alen_1_0,vol_alen_2_0,
		(length(triagVertx[1]-pThis)/vol_alen));
	if(vol_alen_2_0<vol_alen){
		// v1
		vol_alen = vol_alen_2_0;
		vol_Center = triagVertx[1];
		edgedist = length(triagVertx[1]-pThis)/mix(vol_alen_1_2,vol_alen_1_0,
		(length(triagVertx[2]-pThis)/vol_alen));
	}
	if(vol_alen_1_0<vol_alen){
		// v2
		vol_alen = vol_alen_1_0;
		vol_Center = triagVertx[2];
		edgedist = length(triagVertx[2]-pThis)/mix(vol_alen_1_2,vol_alen_2_0,
		(length(triagVertx[1]-pThis)/vol_alen));
	}

	// Derivations
	point pCamWrl = point("camera", 0, 0, 0);
	point pThisRST = transform(OUTPUT2D_COORD, pThis);
	point pnThisRST = transform(OUTPUT2D_COORD, pThis+nThis);
	point vol_CenterRST = transform(OUTPUT2D_COORD, vol_Center);
	float len2d = length(vol_CenterRST-pThisRST);
	float len3d = length(vol_Center-pThis);
	vol_decar3D = pThis-vol_Center;
	vol_decar2D = pThisRST-vol_CenterRST;
	vol_decar2D[2] = len2d;
	vol_polar3D = point(len3d,
						acos(dot(normalize(pThis-vol_Center),point(0,0,1))),
						acos(dot(nThis,point(0,0,1))));
	vol_polar2D = point(edgedist,
						acos(dot(normalize(pThisRST-vol_CenterRST),point(0,1,0))),
						acos(dot(normalize(pnThisRST-pThisRST),point(0,1,0))));
}
