// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html
// To prevent "AO leaking" ignoring far points (near plane is not affected by objects BEHIND it)
// Wrinkles-objects should have special prefix
#define PUMASKIN_PREFIX "wri_"
#define NORMALIZE(value, nrm, normalAffect, clampArray) {\
    float res = value;\
    if(normalAffect>0.0001){\
        res = res*mix(1,nrm,normalAffect);\
    }else if(normalAffect<0.0001){\
        res = res*mix(1,(1-nrm),-1*normalAffect);\
    }\
    if(fabs(clampArray[1] - clampArray[0]) > 0.0001){res = (res - clampArray[0])/(clampArray[1]-clampArray[0]);res = clamp(res,0,1);};\
    res = pow(res,clampArray[2]);\
    value = res;\
}


shader charMat (
    float baseLevel = 0.5,
    point pixel_Wfrac_Steps = point(0.02, 10, 0),

    float lt_Level = 0.5,
    point lt_Dir = point(0, -1.1, 1),
    point lt_Size_Pow_Nafk = point(0.5, 1.0, 2.0),
    point lt_Normalize = point(0.0, 0.4, 1.0),

    float do_Level = -0.1,
    point do_Dir = point(0, -1.1, 0.3),
    point do_Size_Pow_Nafk = point(0.1, 1.0, 0.0),
    point do_Normalize = point(0.0, 1.0, 1.0),

    float ao_Level = -0.3,
    point ao_Size_Dist_Vafk = point(1.0, 0.1, 1.0),
    point ao_Normalize = point(0.3, 0.7, 1.0),

    float sp_Level = 0.2,
    point sp_Size_Dist_Vafk = point(0.5, -0.1, 0.0),
    point sp_Normalize = point(0.0, 1.0, 1.0),

    float wri_PositiveFac = 0.0,
	float wri_NegativeFac = 0.0,
    float wri_BlendDist = 0.01,

    output float Total = 0.0,
	output float Positive = 0.0,
	output float Negative = 0.0,
    output float Lt = 0.0,
    output float Do = 0.0,
    output float Ao = 0.0,
    output float Sp = 0.0,
    output float Wri = 0.0
){

    point rbtPixels = transform("raster", point("NDC", 1,1,0));
    float pixelWidth = min(rbtPixels[0],rbtPixels[1])*pixel_Wfrac_Steps[0];
    float pixelStep = pixelWidth/max(0.01,pixel_Wfrac_Steps[1]);

    float ltSoftness = lt_Size_Pow_Nafk[0];
    float ltExpL = lt_Size_Pow_Nafk[1];
    float ltNormalAffect = lt_Size_Pow_Nafk[2];

    float aoSoftness = ao_Size_Dist_Vafk[0];
    float aoMinDst = ao_Size_Dist_Vafk[1];
    float aoViewAffect = ao_Size_Dist_Vafk[2];

    float doSoftness = do_Size_Pow_Nafk[0];
    float doExpL = do_Size_Pow_Nafk[1];
    float doNormalAffect = do_Size_Pow_Nafk[2];

    float spSoftness = sp_Size_Dist_Vafk[0];
    float spMinDst = sp_Size_Dist_Vafk[1];
    float spViewAffect = sp_Size_Dist_Vafk[2];

    aoSoftness = max(0.0,aoSoftness);
    doSoftness = max(0.0,doSoftness);
    spSoftness = max(0.0,spSoftness);
    ltSoftness = max(0.0,ltSoftness);

    point pThis = P;
    point nThis = N;
    string thisId;
    getattribute("geom:name",thisId);
    point pCamWrl = point("camera", 0, 0, 0);
    point pThisRST = transform("raster", pThis);
    float distBase = length(pCamWrl-pThis);
    point nFarFarAway = pCamWrl+9999*(pCamWrl-pThis);

    point pSideHit;
    point nSideHit;
    float hitDist;
    float hitCamDist;
    float wriDist = 0;
    float wriLowBlend = 0.0;
    int isHit;
    string hitId;

    if(fabs(wri_PositiveFac)+fabs(wri_NegativeFac) > 0.0){
        point pCurr = pThis;
        isHit = trace(pCurr, -nThis);
        if(isHit > 0){
            getmessage("trace","geom:name",hitId);
            for(int skipcc = 0;skipcc<5;skipcc++){
                if(startswith(hitId,PUMASKIN_PREFIX) > 0){
                    // masking self intersections!
                    getmessage("trace","P",pSideHit);
                    wriDist = wriDist+length(pCurr-pSideHit);
                    pCurr = pSideHit;
                    isHit = trace(pCurr, -nThis);
                    getmessage("trace","geom:name",hitId);
                }else{
                    break;
                }
            }
            if(isHit > 0){
                getmessage("trace","P",pSideHit);
                getmessage("trace","N",nSideHit);
                wriDist = wriDist+length(pCurr-pSideHit);
                wriLowBlend = clamp(10*wriDist/wri_BlendDist,0,1);
                nThis = mix(nSideHit,nThis,wriLowBlend);
            }
        }
    }

    point ltDirN = normalize(lt_Dir);
    float ltDot = max(0,dot(nThis,ltDirN));
    point doDirN = normalize(do_Dir);
    float doDot = max(0,dot(nThis,doDirN));
    point viDirN = normalize(pCamWrl-pThis);
    float viDot = max(0,dot(nThis,viDirN));

    float testStep = pixelStep;
    float testWidth = pixelWidth;

    float aoLevlCount = 0;
    float spLevlCount = 0;
    float ltLevlCount = 0;
    float doLevlCount = 0;

    float testTotalAo = 0;
    float testTotalSp = 0;
    float testTotalLt = 0;
    float testTotalDo = 0;
    if(testWidth > 0 && fabs(ao_Level)+fabs(sp_Level)+fabs(lt_Level)+fabs(do_Level)>0){
        for(float xi=-testWidth;xi<testWidth;xi = xi+testStep){
            for(float yi=-testWidth;yi<testWidth;yi = yi+testStep){
                float ptlen = sqrt(xi*xi+yi*yi);
                if(ptlen > testWidth+0.1){
                    continue;
                }
                float ltWeight = 1.0-ptlen/(testWidth*ltSoftness);
                float doWeight = 1.0-ptlen/(testWidth*doSoftness);
                float aoWeight = 1.0-ptlen/(testWidth*aoSoftness);
                float spWeight = 1.0-ptlen/(testWidth*spSoftness);
                if(ltWeight <= 0 && doWeight <= 0
                    && aoWeight <= 0 && spWeight <= 0){
                    continue;
                }

                point pSideRst = pThisRST+point(xi,yi,0);
                point pSideWlr = transform("raster", "world", pSideRst);
                isHit = trace(pCamWrl, pSideWlr-pCamWrl);
                if(isHit > 0){
                    getmessage("trace","N",nSideHit);
                    getmessage("trace","P",pSideHit);
                    getmessage("trace","geom:name",hitId);
                }else{
                    nSideHit = nThis;
                    pSideHit = nFarFarAway;
                }
                point dir2hit = pThis-pSideHit;
                hitDist = length(dir2hit);
                hitCamDist = length(pSideHit-pCamWrl);

                if(ltWeight > 0){
                    testTotalLt = testTotalLt+1;
                    isHit = trace(pSideHit+ltDirN*0.001, ltDirN);
                    if(isHit < 1){
                        ltLevlCount = ltLevlCount+1*ltWeight;
                    }
                }
                if(doWeight > 0){
                    testTotalDo = testTotalDo+1;
                    isHit = trace(pSideHit+doDirN*0.001, doDirN);
                    if(isHit > 0){
                        string hitIdDo = hitId;
                        getmessage("trace","geom:name",hitIdDo);
                        if(startswith(hitIdDo,PUMASKIN_PREFIX) < 1){
                            doLevlCount = doLevlCount+1*doWeight;
                        }
                    }
                }

                if(aoWeight > 0){
                    testTotalAo = testTotalAo+1;
                    float aoHitDist = hitDist;
                    if(aoMinDst == 0.0){
                        aoLevlCount = aoLevlCount + aoWeight*aoHitDist;
                    } else if((hitCamDist <= distBase && aoMinDst>0)
                        || (hitCamDist >= distBase && aoMinDst<0))
                    {
                        if(aoWeight*aoHitDist > fabs(aoMinDst)){
                            aoLevlCount = aoLevlCount+1;
                        }else{
                            aoLevlCount = aoLevlCount+aoWeight*aoHitDist/fabs(aoMinDst);
                        }
                    }
                }

                if(spWeight > 0){
                    testTotalSp = testTotalSp+1;
                    float dist2pln = fabs(dot(dir2hit,nThis));
                    if(spMinDst == 0.0){
                        spLevlCount = spLevlCount + spWeight*dist2pln;
                    } else if((hitCamDist <= distBase && spMinDst>0)
                        || (hitCamDist >= distBase && spMinDst<0))
                    {
                        if(spWeight*dist2pln > fabs(spMinDst)){
                            spLevlCount = spLevlCount+1;
                        }else{
                            spLevlCount = spLevlCount+spWeight*dist2pln/fabs(spMinDst);
                        }
                    }
                }
            }
        }
    }

	Lt = pow(ltLevlCount/testTotalLt,ltExpL);
    NORMALIZE(Lt,ltDot,ltNormalAffect,lt_Normalize);

    Do = pow(doLevlCount/testTotalDo,doExpL);
    NORMALIZE(Do,doDot,doNormalAffect,do_Normalize);

    Ao = aoLevlCount/testTotalAo;
    NORMALIZE(Ao,viDot,aoViewAffect,ao_Normalize);

    Sp = spLevlCount/testTotalSp;
    NORMALIZE(Sp,viDot,spViewAffect,sp_Normalize);

    Wri = wriDist*wriLowBlend;

	float aoL = Ao*ao_Level;
	float spL = Sp*sp_Level;
    float ltL = Lt*lt_Level;
    float doL = Do*do_Level;
	float baseShiftAdd = (aoL>0?aoL:0)+(spL>0?spL:0)+(ltL>0?ltL:0)+(doL>0?doL:0);
	float baseShiftDec = (aoL<0?aoL:0)+(spL<0?spL:0)+(ltL<0?ltL:0)+(doL<0?doL:0);
	Positive = baseShiftAdd;
	Negative = -1*baseShiftDec;
	float preTotal = baseShiftAdd+baseShiftDec;
	preTotal = mix(preTotal,wri_PositiveFac,wriLowBlend);
	//baseShiftAdd = mix(baseShiftAdd,max(baseShiftAdd,wri_PositiveFac),wriLowBlend);
	//baseShiftDec = mix(baseShiftDec,min(baseShiftDec,wri_NegativeFac),wriLowBlend);
    Total = baseLevel+preTotal;
}
