// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html

#define MAX_TRANSPR 5
#define MIN_LVL2DETECT 0.00001

void make_orthonormals(vector N, output vector a, output vector b)
{
	if(N[0] != N[1] || N[0] != N[2]) a = cross(vector(1, 1, 1), N);
	else a = cross(vector(-1, 1, 1), N);

	a = normalize(a);
	b = cross(N, a);
}

point vect_rot(point pnt, float ang, point axis)
{
	if(fabs(ang) > 0.001){
		return rotate(pnt, ang, point(0,0,0), axis);
	}
	return pnt;
}

void do_tracing(point pIni, point pDirection, float distcap, string vcmask_name, color vcmask_fac
	, output float out_level
	, output float out_dst) {
	out_level = 0;
	out_dst = 0;
	int isHit = 0;
	float dist = 0;
	float maxdst = distcap;
	float isnameset = strlen(vcmask_name);
	float isvcmasked = isnameset*(vcmask_fac[0]+vcmask_fac[1]+vcmask_fac[2]);
	point pFrom = pIni;
	for(int skipcc = 0;skipcc < MAX_TRANSPR; skipcc++){
		isHit = trace(pFrom, pDirection, "maxdist", maxdst);
		if(isHit > 0){
			point tmpP = pFrom;
			getmessage("trace", "P", tmpP);
			//point tmpN = nThis;
			//getmessage("trace", "N", tmpN);
			float tmpHd = 0;
			getmessage("trace", "hitdist", tmpHd);
			dist = dist+tmpHd;
			float level = 0;
			if(isvcmasked>0){
				color tmpC = color(0,0,0);
				getmessage("trace", vcmask_name, tmpC);
				level = tmpC[0]*vcmask_fac[0]+tmpC[1]*vcmask_fac[1]+tmpC[2]*vcmask_fac[2];
			}else if(isnameset>0){
				string hitId;
				getmessage("trace", "geom:name", hitId);
				if(endswith(hitId,vcmask_name)){
					level = 1;
				}
			}else{
				level = 1;
			}
			if(level >= MIN_LVL2DETECT){
				out_level = level;
				out_dst = dist;
				return;
			}
			maxdst = maxdst-tmpHd;
			pFrom = tmpP;
		}
		if(isHit == 0 || maxdst < MIN_LVL2DETECT){
			break;
		}
	}
}

shader simpleRaycast (
	point lt_Dir = point(0, 0, 1),
	float lt_Elevation = 0.01,
	float lt_Escapedst = 0.0,
	point lt_DirRotate = point(0,0,0),

	string opt_color_vcname = "",
	color opt_colormask = color(1.0,1.0,1.0),
	color opt_unused = color(0.0,0.0,0.0),
	point opt_TestCone = point(0.0,0.0,0.0),

	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),

	output float out_lvl = 0.0,
	output float out_dst = 0.0,
	output color out_col = color(0.0,0.0,0.0)
){
	float coneRad = opt_TestCone[0];
	if(lt_Escapedst < 0.0 || coneRad < 0.0){
		// Fast exit for no-need-to-test cases
		return;
	}
	point pThis = isconnected(in_pos)?in_pos:P;
	point nThis = isconnected(in_nrm)?in_nrm:N;
	point p1 = cross(nThis,point("object", 0, 0, 1));
	point p2 = cross(nThis,p1);
	float lt_Maxxdst = lt_Escapedst>0.0?lt_Escapedst:999.0;

	float raylvl = 0;
	float raydst = 0;
	point lt_DirN;
	lt_DirN = normalize(lt_Dir);
	lt_DirN = vect_rot(lt_DirN, lt_DirRotate[0], p1);
	lt_DirN = vect_rot(lt_DirN, lt_DirRotate[1], p2);
	lt_DirN = vect_rot(lt_DirN, lt_DirRotate[2], nThis);
	do_tracing(pThis+lt_DirN*lt_Elevation, lt_DirN, lt_Maxxdst, opt_color_vcname, opt_colormask, raylvl, raydst);
	float originalDot = dot(nThis,lt_DirN);
	if(raylvl < MIN_LVL2DETECT && coneRad > 0.0){
		point rp1;
		point rp2;
		make_orthonormals(lt_DirN, rp1, rp2);
		//float coneSteps1 = max(2,opt_TestCone[1]);
		//float coneSteps2 = max(2,opt_TestCone[2]);
		//float p1_stp = 1/coneSteps1;
		//float p2_stp = 2*M_PI/coneSteps2;
		//for(float ii = coneRad; ii > 0; ii = ii-p1_stp){
		//	point lt_DirN2 = vect_rot(lt_DirN, ii, p1);
		//	for(float jj = -M_PI; jj <= M_PI; jj = jj+p2_stp){
		//		point lt_DirN3 = vect_rot(lt_DirN2, jj, lt_DirN);
		//		do_tracing(pThis+lt_DirN3*lt_Elevation, lt_DirN3, lt_Maxxdst, opt_color_vcname, opt_colormask, raylvl, raydst);
		//		if(raylvl >= MIN_LVL2DETECT){
		//			ii = 0;
		//			break;
		//		}
		//	}
		//}
		float coneSteps1 = max(2,opt_TestCone[1]);
		float coneSteps2 = opt_TestCone[2];
		float csdx = 1/coneSteps1;
		for(float ii = -1; ii < 1 && raylvl < MIN_LVL2DETECT; ii = ii+csdx){
			for(float jj = -1; jj < 1 && raylvl < MIN_LVL2DETECT; jj = jj+csdx){
				point lt_DirN2 = lt_DirN+rp1*ii*coneRad+rp2*jj*coneRad;
				if(originalDot*dot(lt_DirN2,nThis) > 0)
				{
					//+p1*ii*coneSteps2+p2*jj*coneSteps2
					do_tracing(pThis+lt_DirN2*lt_Elevation, lt_DirN2, lt_Maxxdst, opt_color_vcname, opt_colormask, raylvl, raydst);
				}
			}
		}
	}
	//out_pos = pThis;
	//out_nrm = nThis;
	if(strlen(opt_color_vcname) > 0){
		getmessage("trace", opt_color_vcname, out_col);
	}
	out_lvl = raylvl;
	out_dst = raydst;
}
