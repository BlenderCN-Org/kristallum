// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html

#define WRI_VERTEXCOL_NAME "WriLevel"

#define MAXCACHE 20
#define MAXCHL(cl) (max(max(cl[0],cl[1]),cl[2]))
#define ISWHITE(cl) (fabs(cl[0]-cl[1])<=0.1 && fabs(cl[0]-cl[2])<=0.1 && fabs(cl[0]) >= 0.1)
#define ISRED(cl) (fabs(cl[0])>=0.1 && fabs(cl[1])<=0.1 && fabs(cl[2]) <= 0.1)
#define ISGREEN(cl) (fabs(cl[1])>=0.1 && fabs(cl[0])<=0.1 && fabs(cl[2]) <= 0.1)
#define ISBLUE(cl) (fabs(cl[2])>=0.1 && fabs(cl[0])<=0.1 && fabs(cl[1]) <= 0.1)

shader charWri (
	point base_Frac_Steps = point(0.003, 0, 2),
	float wri_Level = 0.0,
	float wri_Blur = 0.03,
	point wri_Channels = point(-1,0,1),
	point wri_Sameness = point(0,0.2,0),
	color in_colmap = color(0,0,0),
	string name_ColMap = "",

	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),

	output float out_Total = 0.0,
	output point wri_ColorMap = point(0,0,0)
){
	point rbtPixels = transform("raster", point("NDC", 1,1,0));
	float baseResolution = min(rbtPixels[0],rbtPixels[1]);
	float pixelWidth = baseResolution*base_Frac_Steps[0];

	string vcname = name_ColMap;
	if(strlen(vcname)<3){
		vcname = WRI_VERTEXCOL_NAME;
	}

	point pThis = isconnected(in_pos)?in_pos:P;
	point nThis = isconnected(in_nrm)?in_nrm:N;
	point pCamWrl = point("camera", 0, 0, 0);
	point pThisRST = transform("raster", pThis);

	//float wriDist = 0;
	//string vtname = name_TraitMap;
	//if(strlen(vtname)<3){
	//	vtname = WRI_VERTEXTRT_NAME;
	//}
	//if(MAXCHL(vcColTraits1)>0){
	//	int isHit = 0;
	//	color hitColMap;
	//	point pSideHit;
	//	point nSideHit;
	//	point pCurr = pThis;
	//	for(int skipcc = 0;skipcc<5;skipcc++){
	//		isHit = trace(pCurr, -nThis);
	//		getmessage("trace",vtname,hitColMap);
	//		getmessage("trace","P",pSideHit);
	//		if(isHit > 0 && MAXCHL(hitColMap)>0){
	//			// ignoring wri intersections!
	//			wriDist = wriDist+length(pCurr-pSideHit);
	//			pCurr = pSideHit-nThis*0.00001;
	//		}else{
	//			break;
	//		}
	//	}
	//	if(isHit > 0 && MAXCHL(hitColMap) < 0.1){
	//		getmessage("trace","P",pSideHit);
	//		getmessage("trace","N",nSideHit);
	//		wriDist = wriDist+length(pCurr-pSideHit);
	//		nThis = nSideHit;
	//	}
	//}
	//out_Normal = nThis;

	
	
	float avgCount = 0;
	point avgColor = point(0,0,0);
	point vcColMapOut = in_colmap;
	if(fabs(wri_Blur*wri_Level*pixelWidth) > 0.001){
		float testStep = 1;
		float testWidth = pixelWidth;
		if(base_Frac_Steps[2]>0){
			testStep = base_Frac_Steps[2]*1/(2*testWidth);
		}else{
			testStep = max(0.01,1/base_Frac_Steps[1]);
		}
		if(testStep>0){
			for(float ii=0; ii<1; ii = ii+testStep){
				float xi=mix(-testWidth,testWidth, ii);
				for(float jj=0; jj<1; jj = jj+testStep){
					float yi=mix(-testWidth,testWidth, jj);
					point pOffs = point(xi,yi,0);
					point pSideRst = pThisRST+pOffs;
					point pSideWlr = transform("raster", "world", pSideRst);
					int isHit = trace(pCamWrl, pSideWlr-pCamWrl);
					if(isHit > 0){
						point hitPos = point(0,0,0);
						color hitColor = color(0,0,0);
						getmessage("trace", vcname, hitColor);
						getmessage("trace", "P", hitPos);
						point testDist = hitPos-pThis;
						float pIlen = length(testDist);
						//float pIlen = length(pOffs)*0.003;
						if(pIlen<wri_Blur){
							int isSameColor = 1;
							if(wri_Sameness[0] > 0.0001 && fabs(hitColor[0]-vcColMapOut[0]) > wri_Sameness[0]){
								isSameColor = 0;
							}
							if(wri_Sameness[1] > 0.0001 && fabs(hitColor[1]-vcColMapOut[1]) > wri_Sameness[1]){
								isSameColor = 0;
							}
							if(wri_Sameness[2] > 0.0001 && fabs(hitColor[2]-vcColMapOut[2]) > wri_Sameness[2]){
								isSameColor = 0;
							}
							if(isSameColor>0){
								avgColor = avgColor+hitColor*(pIlen/wri_Blur);
								avgCount = avgCount+1;
							}
						}
					}
				}
			}
		}
	}
	if(avgCount>0){
		vcColMapOut = avgColor/avgCount;
	}

	float summary = wri_Channels[0]*vcColMapOut[0]+wri_Channels[1]*vcColMapOut[1]+wri_Channels[2]*vcColMapOut[2];
	out_Total = summary*wri_Level;
	wri_ColorMap = vcColMapOut;
}
