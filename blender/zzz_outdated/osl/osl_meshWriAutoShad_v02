#define WRI_VERTEXCOL_NAME "Wri"

void make_orthonormals(vector N, output vector a, output vector b)
{
	if(N[0] != N[1] || N[0] != N[2]) a = cross(vector(1, 1, 1), N);
	else a = cross(vector(-1, 1, 1), N);

	a = normalize(a);
	b = cross(N, a);
}

shader wriDetect (
	point base_Rad1_Rad1_Steps = point(0.0, 6.28, 3),
	point base_Rad2_Rad2_Steps = point(0.5, 0.8, 3),
	float base_Alpha = 0.0,
	float rayc_Elevation = 0.0001,
	float rayc_Maxdist = 0.1,
	float rayc_Nrmdist = 0.005,

	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),
	color in_color = color(0,0,0),
	string in_color_vcname = "",
	color wri_colormask = color(1,0,0),

	output color out_avg_color = color(0,0,0),
	output color out_max_color = color(0,0,0),
	output point out_minmaxdst = point(0,0,0),
	output point out_nrm = point(0,0,0)
){
	if(base_Alpha < 0.001){
		return;
	}
	string vcname = in_color_vcname;
	if(strlen(vcname)<3){
		vcname = WRI_VERTEXCOL_NAME;
	}
	point pThis = isconnected(in_pos)?in_pos:P;
	point nThis = isconnected(in_nrm)?in_nrm:N;
	out_nrm = nThis;
	//point pCamWrl = point("camera", 0, 0, 0);
	int isHit = 0;
	float hitdist = 0;
	color hitColor = color(0,0,0);
	point nTraceDir = nThis;
	point pTraceRoot = pThis+nThis*rayc_Elevation;
	if(rayc_Nrmdist > 0){
		isHit = trace(pTraceRoot, nTraceDir, "maxdist" , rayc_Maxdist);
		if(isHit>0){
			// Inside wri. Transfering normals
			point nTraceN = nThis;
			getmessage("trace", vcname, hitColor);
			getmessage("trace", "hitdist", hitdist);
			getmessage("trace", "N", nTraceN);
			float nrmMask = (wri_colormask[0]*hitColor[0]+ wri_colormask[1]*hitColor[1] + wri_colormask[2]*hitColor[2]);
			out_avg_color = color(0,0,0);
			out_max_color = hitColor;
			out_minmaxdst = point(nrmMask,hitdist,hitdist);
			out_nrm = mix(nThis,-1*nTraceN,clamp(hitdist/rayc_Nrmdist*nrmMask,0,1));
			return;
		}
	}

	color totalColor1 = color(0,0,0);
	color totalColor2 = color(0,0,0);
	float totalCount = 0;
	float totalDist = 0;
	float totalMaxDist = 0;
	float totalMinDist = 9999;
	float totalElev = 0;
	if(base_Rad1_Rad1_Steps[2]*base_Rad2_Rad2_Steps[2] > 0){
		float testStepU = 1/max(1,base_Rad1_Rad1_Steps[2]);
		float testStepV = 1/max(1,base_Rad2_Rad2_Steps[2]);
		point perpend1;
		point perpend2;
		make_orthonormals(nTraceDir,perpend1,perpend2);
		for(float ii=0; ii<1; ii = ii+testStepU){
			float xi=mix(base_Rad1_Rad1_Steps[0], base_Rad1_Rad1_Steps[1], ii);
			point perpend1_r = rotate(perpend1,xi,point(0,0,0),nTraceDir);
			float sliceHits = 0;
			float sliceCount = 0;
			for(float jj=0; jj<1; jj = jj+testStepV){
				sliceCount = sliceCount+1;
				float yi=mix(base_Rad2_Rad2_Steps[0], base_Rad2_Rad2_Steps[1], jj);
				point nTraceDir2 = rotate(nTraceDir,yi,point(0,0,0),perpend1_r);
				isHit = trace(pTraceRoot, nTraceDir2, "maxdist" , rayc_Maxdist);
				if(isHit > 0){
					getmessage("trace", vcname, hitColor);
					getmessage("trace", "hitdist", hitdist);
					float nrmMask = (wri_colormask[0]*hitColor[0]+ wri_colormask[1]*hitColor[1] + wri_colormask[2]*hitColor[2]);
					if(nrmMask>0){
						sliceHits = sliceHits+1;
						totalCount = totalCount+1;
						totalColor1 = totalColor1+hitColor;
						totalColor2 = color(max(totalColor2[0],hitColor[0]),max(totalColor2[1],hitColor[1]),max(totalColor2[2],hitColor[2]));
						totalDist = totalDist+hitdist;
						totalMaxDist = max(totalMaxDist,hitdist);
						totalMinDist = min(totalMinDist,hitdist);
					}
				}
			}
			totalElev = max(totalElev,sliceHits/sliceCount);
		}
	}
	if(totalCount>0){
		out_avg_color = totalColor1/totalCount*base_Alpha;
		out_max_color = totalColor2*base_Alpha;
		out_minmaxdst = point(totalElev,totalMaxDist,totalDist/totalCount);
	}
}
