
shader detIsInVolume (
	point in_pos = point(0,0,0),
	point testDir = point(0,0,0),
	string transparent_namePostfx = "", // Name postfixes, delimited with ",". Proper objecty will be ignored

	output float out_deepness = 0,
	output point out_deepnessP = point(0,0,0)
)
{
	point pThis = isconnected(in_pos)?in_pos:P;
	//point pThisRST = transform("raster", pThis);

	string thisId;
	string hitId;
	getattribute("geom:name",thisId);
	point pCamWrl = point("camera", 0, 0, 0);
	point testdir = isconnected(testDir)?normalize(testDir):normalize(pCamWrl-pThis);


	int namepartcc = 0;
	string nameparts[10];
	if(strlen(transparent_namePostfx) > 0){
		namepartcc = split(transparent_namePostfx, nameparts, ",", 10);
	}
	point pSideHit = pThis;
	point pExitPoint = pThis;
	point pCurr = pThis;
	for(int skipcc = 0;skipcc<10;skipcc++){
		int isHit = trace(pCurr+0.0001*testdir, testdir);
		getmessage("trace","geom:name",hitId);
		int isSameId = 1;
		if(hitId != thisId){
			isSameId = 0;
			for(int i=0;i<namepartcc;i++){
				if(endswith(hitId,nameparts[i]) > 0){
					isSameId = 1;
					break;
				}
			}
		}
		if(isHit > 0 && isSameId == 0){
			getmessage("trace","P",pExitPoint);
			break;
		}else{
			if(isHit == 0){
				break;
			}
		}
		getmessage("trace","P",pCurr);
	}
	//printf("\n%i:%i, ishit = %i",(int)pThisRST[0],(int)pThisRST[1],isHit);
	out_deepnessP = pExitPoint;
	out_deepness = length(pThis-pExitPoint);
}
