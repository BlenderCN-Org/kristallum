// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html
// 1) To prevent "AO leaking" ignoring far points (near plane is not affected by objects BEHIND it)

// 2) Wrinkles-objects should have special prefix
#define WRI_OBJECT_PREFIX "wri_"
#define WRI_NEGATE_FLAG "_neg"
#define WRI_INVERT_FLAG "_inv"

#define NORMALIZE(value, nrm, normalAffect, clampArray) {\
    float res = value;\
    if(normalAffect>0.0001){\
        res = res*mix(1,nrm,normalAffect);\
    }else if(normalAffect<0.0001){\
        res = res*mix(1,(1-nrm),-1*normalAffect);\
    }\
    if(fabs(clampArray[1] - clampArray[0]) > 0.0001){res = (res - clampArray[0])/(clampArray[1]-clampArray[0]);res = clamp(res,0,1);};\
    res = pow(res,clampArray[2]);\
    value = res;\
}

shader charMat (
    point base_Frac_Steps = point(0.02, 15, 0),
    float base_Level = 0.5,

    point lt_Dir = point(0, -1.1, 1),
    point lt_Frac_Pow_Nafk = point(0.5, 1.0, 2.0),
    point lt_Normalize = point(0.0, 0.4, 1.0),
    float lt_Level = 0.5,

    point do_Dir = point(0, -1.1, 0.3),
    point do_Frac_Pow_Nafk = point(0.1, 1.0, 0.0),
    point do_Normalize = point(0.0, 1.0, 1.0),
    float do_Level = -0.2,

    point ao_Frac_Limit_Vafk = point(1.0, 0.1, 1.0),
    point ao_Normalize = point(0.3, 0.7, 1.0),
    float ao_Level = -0.5,

    point sp_Frac_Limit_Vafk = point(0.5, -0.1, 0.0),
    point sp_Normalize = point(0.0, 1.0, 1.0),
    float sp_Level = 0.2,

    point wri_Min_Max_Blend = point(-0.3, 0.3, 0.05),
    float wri_Level = 0.0,

    point in_pos = point(0,0,0),
    point in_nrm = point(0,0,0),

    output float Total = 0.0,
    output float Lt = 0.0,
    output float Do = 0.0,
    output float Ao = 0.0,
    output float Sp = 0.0,
    output float WriDst = 0.0
){
    point rbtPixels = transform("raster", point("NDC", 1,1,0));
    float pixelWidth = min(rbtPixels[0],rbtPixels[1])*base_Frac_Steps[0];
    //float pixelStep = pixelWidth/max(0.01,base_Frac_Steps[1]);

    float ltSoftness = lt_Frac_Pow_Nafk[0];
    float ltExpL = lt_Frac_Pow_Nafk[1];
    float ltNormalAffect = lt_Frac_Pow_Nafk[2];

    float doSoftness = do_Frac_Pow_Nafk[0];
    float doExpL = do_Frac_Pow_Nafk[1];
    float doNormalAffect = do_Frac_Pow_Nafk[2];

    float aoSoftness = ao_Frac_Limit_Vafk[0];
    float aoMinDst = ao_Frac_Limit_Vafk[1];
    float aoViewAffect = ao_Frac_Limit_Vafk[2];

    float spSoftness = sp_Frac_Limit_Vafk[0];
    float spMinDst = sp_Frac_Limit_Vafk[1];
    float spViewAffect = sp_Frac_Limit_Vafk[2];

    float wriMin = wri_Min_Max_Blend[0];
    float wriMax = wri_Min_Max_Blend[1];
    float wriBlendDst = wri_Min_Max_Blend[2];

    aoSoftness = max(0.0,aoSoftness)*(fabs(ao_Level)<0.0001?0:1);
    doSoftness = max(0.0,doSoftness)*(fabs(do_Level)<0.0001?0:1);
    spSoftness = max(0.0,spSoftness)*(fabs(sp_Level)<0.0001?0:1);
    ltSoftness = max(0.0,ltSoftness)*(fabs(lt_Level)<0.0001?0:1);

    point pThis = length(in_pos)>0?in_pos:P;
    point nThis = length(in_nrm)>0?in_nrm:N;

    string thisId;
    getattribute("geom:name",thisId);
    point pCamWrl = point("camera", 0, 0, 0);
    point pThisRST = transform("raster", pThis);
    float distBase = length(pCamWrl-pThis);
    point nFarFarAway = pCamWrl+9999*(pCamWrl-pThis);

    point pSideHit;
    point nSideHit;
    float hitDist = 0;
    float hitCamDist = 0;
    int isHit = 0;
    string hitId;

    float wriDist = 0;
    point wriNrm = nThis;
    point wriPos = pThis;
    if(fabs(wri_Level) > 0.001){
        if(startswith(thisId,WRI_OBJECT_PREFIX) > 0){
            //wriNrm = nThis;
            //wriPos = pThis;
            point pCurr = pThis;
            for(int skipcc = 0;skipcc<5;skipcc++){
                isHit = trace(pCurr-nThis*0.00001, -nThis);
                getmessage("trace","geom:name",hitId);
                getmessage("trace","P",pSideHit);
                getmessage("trace","N",nSideHit);
                if(isHit > 0 && startswith(hitId,WRI_OBJECT_PREFIX) > 0){
                    // ignoring wri intersections!
                    wriDist = wriDist+length(pCurr-pSideHit);
                    pCurr = pSideHit;
                }else{
                    break;
                }
            }
            if(isHit > 0 && startswith(hitId,WRI_OBJECT_PREFIX) < 1){
                wriDist = wriDist+length(pCurr-pSideHit);
                wriDist = wriDist/wriMax;
                nThis = mix(nSideHit,nThis,clamp(wriDist,0,1));
            }else{
                wriDist = 0;
            }
            hitId = thisId;
        }else
        {
            point pCurr = pThis;
            point pCurrN = -nThis;//-I;
            for(int skipcc = 0;skipcc<5;skipcc++){
                isHit = trace(pCurr+pCurrN*0.00001, pCurrN);
                getmessage("trace","geom:name",hitId);
                getmessage("trace","P",pSideHit);
                getmessage("trace","Ng",nSideHit);
                if(isHit > 0 && startswith(hitId,WRI_OBJECT_PREFIX) < 1){
                    // ignoring non-wri intersections!
                    wriDist = wriDist+length(pCurr-pSideHit);
                    pCurr = pSideHit;
                }else{
                    break;
                }
            }
            if(isHit > 0 && startswith(hitId,WRI_OBJECT_PREFIX) > 0){
                wriDist = wriDist+length(pCurr-pSideHit);
                wriDist = wriDist/wriMin;
                wriPos = pSideHit;
                wriNrm = nSideHit;
            }else{
                wriDist = 0;
            }
        }
        if(fabs(wriDist) > 0.000001){
            string _splt[10];
            // wriDist already normalized!
            if(wriDist >= 1.0 || wriDist <= -1.0){
                wriDist = 0;
            }else if(split(hitId,_splt,WRI_NEGATE_FLAG) > 1){
                wriDist = -1*wriDist;
            }

            wriDist = sign(wriDist)*linearstep(wriBlendDst,1,fabs(wriDist));
            // Inverting according to object Name
            //float isFacingView = dot(wriNrm,Ng);
            if(fabs(wriDist)>0.0001 && split(hitId,_splt,WRI_INVERT_FLAG) > 1){
                wriDist = sign(wriDist)*(1-fabs(wriDist));
            }
        }
    }
    point ltDirN = normalize(lt_Dir);
    float ltDot = max(0,dot(nThis,ltDirN));
    point doDirN = normalize(do_Dir);
    float doDot = max(0,dot(nThis,doDirN));
    point viDirN = normalize(pCamWrl-pThis);
    float viDot = max(0,dot(nThis,viDirN));

    float aoLevlCount = 0;
    float spLevlCount = 0;
    float ltLevlCount = 0;
    float doLevlCount = 0;

    float testTotalAo = 0;
    float testTotalSp = 0;
    float testTotalLt = 0;
    float testTotalDo = 0;
    point wriMediatorDir = point(0,0,0);
    float wriMediatorMin = 9999;
    if(pixelWidth > 0 && fabs(ao_Level)+fabs(sp_Level)
        +fabs(lt_Level)+fabs(do_Level)){
        float testWidth = pixelWidth;
        float testStep = 1;
        if(base_Frac_Steps[2]>0){
            testStep = 1/(2*testWidth)*base_Frac_Steps[2];
        }else{
            testStep = max(0.01,1/base_Frac_Steps[1]);
        }
        for(float ii=0; ii<1; ii = ii+testStep){
            float xi=mix(-testWidth,testWidth, ii);
            for(float jj=0; jj<1; jj = jj+testStep){
                float yi=mix(-testWidth,testWidth, jj);
                float ptlen = sqrt(xi*xi+yi*yi);
                if(ptlen > testWidth+0.1){
                    continue;
                }
                float ltWeight = (1.0-ptlen/(testWidth*ltSoftness))*(ltSoftness>0?1:0);
                float doWeight = (1.0-ptlen/(testWidth*doSoftness))*(doSoftness>0?1:0);
                float aoWeight = (1.0-ptlen/(testWidth*aoSoftness))*(aoSoftness>0?1:0);
                float spWeight = (1.0-ptlen/(testWidth*spSoftness))*(spSoftness>0?1:0);
                if(ltWeight <= 0 && doWeight <= 0
                    && aoWeight <= 0 && spWeight <= 0){
                    continue;
                }

                point pSideRst = pThisRST+point(xi,yi,0);
                point pSideWlr = transform("raster", "world", pSideRst);
                isHit = trace(pCamWrl, pSideWlr-pCamWrl);
                if(isHit > 0){
                    getmessage("trace","N",nSideHit);
                    getmessage("trace","P",pSideHit);
                    getmessage("trace","geom:name",hitId);
                }else{
                    nSideHit = nThis;
                    pSideHit = nFarFarAway;
                }
                point dir2hit = pThis-pSideHit;
                hitDist = length(dir2hit);
                hitCamDist = length(pSideHit-pCamWrl);

                if(ltWeight > 0){
                    testTotalLt = testTotalLt+1;
                    int isHit2 = trace(pSideHit+ltDirN*0.001, ltDirN);
                    if(isHit2 < 1){
                        ltLevlCount = ltLevlCount+1*ltWeight;
                    }
                }
                if(doWeight > 0){
                    testTotalDo = testTotalDo+1;
                    int isHit2 = trace(pSideHit+doDirN*0.001, doDirN);
                    if(isHit2 > 0){
                        doLevlCount = doLevlCount+1*doWeight;
                    }
                }

                if(aoWeight > 0){
                    testTotalAo = testTotalAo+1;
                    float aoHitDist = hitDist;
                    if(aoMinDst == 0.0){
                        aoLevlCount = aoLevlCount + aoWeight*aoHitDist;
                    } else if((hitCamDist <= distBase && aoMinDst>0)
                        || (hitCamDist >= distBase && aoMinDst<0))
                    {
                        if(aoWeight*aoHitDist > fabs(aoMinDst)){
                            aoLevlCount = aoLevlCount+1;
                        }else{
                            aoLevlCount = aoLevlCount+aoWeight*aoHitDist/fabs(aoMinDst);
                        }
                    }
                }

                if(spWeight > 0){
                    testTotalSp = testTotalSp+1;
                    float dist2pln = fabs(dot(dir2hit,nThis));
                    if(spMinDst == 0.0){
                        // Special case - object bounds
                        if(hitId != thisId){
                            spLevlCount = spLevlCount + spWeight*1;
                        }
                    } else if((hitCamDist <= distBase && spMinDst>0)
                        || (hitCamDist >= distBase && spMinDst<0))
                    {
                        if(spWeight*dist2pln > fabs(spMinDst)){
                            spLevlCount = spLevlCount+1;
                        }else{
                            spLevlCount = spLevlCount+spWeight*dist2pln/fabs(spMinDst);
                        }
                    }
                }
            }
        }
    }

    Lt = pow(ltLevlCount/testTotalLt,ltExpL);
    NORMALIZE(Lt,ltDot,ltNormalAffect,lt_Normalize);

    Do = pow(doLevlCount/testTotalDo,doExpL);
    NORMALIZE(Do,doDot,doNormalAffect,do_Normalize);

    Ao = aoLevlCount/testTotalAo;
    NORMALIZE(Ao,viDot,aoViewAffect,ao_Normalize);

    Sp = spLevlCount/testTotalSp;
    NORMALIZE(Sp,viDot,spViewAffect,sp_Normalize);

    WriDst = wriDist;

    Total = base_Level
        +Ao*ao_Level
        +Sp*sp_Level
        +Lt*lt_Level
        +Do*do_Level
        +WriDst*wri_Level;
}
