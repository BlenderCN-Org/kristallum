// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html

#define WRI_OBJECT_PREFIX "wri_"
#define WRI_VERTEXCOL_NAME "Wri"
#define WRI_VERTEXALPHA_NAME "WriAlpha"
#define WRI_GRIDT_MINANG 0.1
#define MAXCACHE 100
#define MAXCACHEx4 400
#define FALLOFF_POW 1

#define ISWHITE(cl) (fabs(cl[0]-cl[1])<0.0001 && fabs(cl[0]-cl[2])<0.0001)

shader charWriVc (
    float base_Level = 0.0,
	point base_Frac_Steps = point(0.001, 0, 1),
	point wri_Levels = point(1,1,1),
	point wri_DirectFalloff = point(0.003,0.002,0.001),
	point wri_DirectPow = point(1,1,1),
	float wri_WhiteFalloff = 0.003, // Resolution frac
	float wri_NormalBlend = 0.1,

	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),
	color in_colmap = color(0,0,0),
	string name_ColMap = "",
	color in_colalpha = color(0,0,0),
	string name_ColAlpha = "",
	string name_WriObj = "",

	output float out_Total = 0.0,
	output point out_Normal = 0.0,
	output float wri_Height = 0.0,
	output float wri_Alpha = 0.0,
	//output color wri_ColMap = color(0,0,0),
	output float WriR = 0.0,
	output float WriG = 0.0,
	output float WriB = 0.0
){
	point rbtPixels = transform("raster", point("NDC", 1,1,0));
	float baseResolution = min(rbtPixels[0],rbtPixels[1]);
	float pixelWidth = baseResolution*base_Frac_Steps[0];

	string vcname = name_ColMap;
	if(strlen(vcname)<3){
		vcname = WRI_VERTEXCOL_NAME;
	}
	string vaname = name_ColAlpha;
	if(strlen(vaname)<3){
		vaname = WRI_VERTEXALPHA_NAME;
	}
	color wriAlpha = color(0,0,0);
	getattribute(vaname,wriAlpha);
	point pThis = length(in_pos)>0?in_pos:P;
	point nThis = length(in_nrm)>0?in_nrm:N;
	point pCamWrl = point("camera", 0, 0, 0);
	point pThisRST = transform("raster", pThis);
	float wriDist = 0;

	if(wri_NormalBlend>0){
		string WOP = name_WriObj;
		if(strlen(WOP)<3){
			WOP = WRI_OBJECT_PREFIX;
		}
		string thisId;
		getattribute("geom:name",thisId);
		if(startswith(thisId,WOP) > 0){
			string hitId;
			point pCurr = pThis;
			point pSideHit;
			point nSideHit;
			int isHit = trace(pCurr, -nThis);
			getmessage("trace","geom:name",hitId);
			if(isHit > 0 && startswith(hitId,WOP) < 1){
				getmessage("trace","P",pSideHit);
				getmessage("trace","N",nSideHit);
				getmessage("trace",vaname,wriAlpha);
				wriDist = length(pCurr-pSideHit);
				nThis = mix(nSideHit,nThis,clamp(wriDist/wri_NormalBlend,0,1));
				//nThis = nSideHit;
			}
		}
	}

	float wri_LevelBlend = (wriAlpha[0]+wriAlpha[1]+wriAlpha[2])/3;
	int anglesSet = 0;
	int anglesWhiteSet = 0;
	int ptncIdx[4] = {0, MAXCACHE, MAXCACHE*2, MAXCACHE*3};
	point potencialsPoints[MAXCACHEx4] = {0};
	point potencialsPoin3d[MAXCACHEx4] = {0};
	float potencialsLevels[MAXCACHEx4] = {0};
	if(fabs(wri_LevelBlend*(fabs(wri_Levels[0])+fabs(wri_Levels[1])+fabs(wri_Levels[2])))>0.001){
		float testStep = 1;
		if(base_Frac_Steps[2]>0){
			testStep = base_Frac_Steps[2]*1/(2*pixelWidth);
		}else{
			testStep = max(0.01,1/base_Frac_Steps[1]);
		}
		for(float ii=0; ii<1; ii = ii+testStep){
			float xi=mix(-pixelWidth,pixelWidth, ii);
			for(float jj=0; jj<1; jj = jj+testStep){
				float yi=mix(-pixelWidth,pixelWidth, jj);
				point pOffs = point(xi,yi,0);
				int angl = int(MAXCACHE*(atan2(pOffs[1],pOffs[0])+M_PI)/M_2PI);
				//if(fabs(potencialsLevels[anglIdx]) > 0.001 && length(pOffs)<length(potencialsPoints[anglIdx])){
				//	// already found
				//	continue;
				//}
				
				point pSideRst = pThisRST+pOffs;
				point pSideWlr = transform("raster", "world", pSideRst);
				int isHit = trace(pCamWrl, pSideWlr-pCamWrl);
				if(isHit > 0){
					point hitPos = point(0,0,0);
					color hitColor = color(0,0,0);
					getmessage("trace", vcname, hitColor);
					getmessage("trace", "P", hitPos);
					//if(ii < 0.01 && jj < 0.01){wri_ColMap = hitColor;}
					for(int chnl=0;chnl <= 2;chnl++){
						int anglIdx = ptncIdx[chnl]+angl;
						float hitLevel = hitColor[chnl];
						if(hitLevel > 0.00001){
							if(ISWHITE(hitColor)){
								// Stopper in this direction
								hitLevel = -1*hitLevel;
							}
							if(fabs(potencialsLevels[anglIdx]) < 0.001 || length(pOffs)<length(potencialsPoints[anglIdx])){
								anglesSet = anglesSet+1;
								potencialsPoints[anglIdx] = pOffs;
								potencialsLevels[anglIdx] = hitLevel;
								potencialsPoin3d[anglIdx] = hitPos-pThis;
								if(ISWHITE(hitColor)){
									anglesWhiteSet = anglesWhiteSet+1;
									int anglIdx2 = ptncIdx[3]+angl;
									potencialsPoints[anglIdx2] = pOffs;
									potencialsLevels[anglIdx2] = hitLevel;
									potencialsPoin3d[anglIdx2] = hitPos-pThis;
								}
							}
						}
					}
				}
			}
		}
	}

	float summary = 0;
	if(anglesSet>0){
		for(int chnl=0;chnl<=2;chnl++){
			//float dirfo = baseResolution*wri_DirectFalloff[chnl];//2d pixel frac
			float dirfo = 20*wri_DirectFalloff[chnl];//3d dist frac
			if(fabs(dirfo)>0.001){
				float dirpo = wri_DirectPow[chnl];
				float Wri = 0;
				//for(int i=ptncIdx[chnl];i<ptncIdx[chnl]+MAXCACHE;i++){
				//	if(potencialsLevels[i] < 0.001){
				//		continue;
				//	}
				//}
				float pCenterLvl = 0;
				float pCenterCc = 0;
				for(int i=ptncIdx[chnl];i<ptncIdx[chnl]+MAXCACHE;i++){
					if(potencialsLevels[i] < 0.001){
						continue;
					}
					//float pIlen = length(potencialsPoints[i]);
					float pIlen = length(potencialsPoin3d[i]);
					float distf = potencialsLevels[i]*pow(1.0-length(pIlen)/dirfo,dirpo);
					if(distf > 0){
						pCenterLvl = max(pCenterLvl,distf);
						pCenterCc = pCenterCc+1;
					}
				}
				if(pCenterCc>0){
					Wri = pCenterLvl;
				}
				if(chnl == 0){
					WriR = Wri;
				}else if(chnl == 1){
					WriG = Wri;
				}else if(chnl == 2){
					WriB = Wri;
				}
			}
		}
		summary = max(max(wri_Levels[0]*WriR,wri_Levels[1]*WriG),wri_Levels[2]*WriB);
		float whifo = baseResolution*wri_WhiteFalloff;//2d pixel frac
		if(anglesWhiteSet > 0 && fabs(whifo)>0.001){
			float antiWriLvl = 0;
			float antiWriCc = 0;
			for(int i=ptncIdx[3];i<ptncIdx[3]+MAXCACHE;i++){
				if(potencialsLevels[i] > -0.001){
					continue;
				}
				float pIlen = length(potencialsPoints[i]);
				float distf = fabs(potencialsLevels[i])*(1.0-length(pIlen)/whifo);
				if(distf > 0){
					antiWriLvl = max(antiWriLvl,distf);
					antiWriCc = antiWriCc+1;
				}
			}
			if(antiWriCc>0){
				summary = summary*(1.0-antiWriLvl);
			}
		}
	}
	
	out_Total = base_Level+summary*wri_LevelBlend;
	out_Normal = nThis;
	wri_Height = wriDist;
	wri_Alpha = wri_LevelBlend;
	
	//color hereColor = color(0,0,0);
	//getattribute(vcname, hereColor);
	//out_Total = max(max(hereColor[0],hereColor[1]),hereColor[2]);
}
