// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html
// IMPORTANT: For strong look camera z == Eye level above surface!

void make_orthonormals(vector N, output vector a, output vector b)
{
	//point p1 = vector(0, 0, 1);
	//if(fabs(dot(p1, N))>0.9){
	//	p1 = vector(1, 0, 0);
	//}
	//a = cross(p1, N);
	if(N[0] != N[1] || N[0] != N[2]) a = cross(vector(1, 1, 1), N);
	else a = cross(vector(-1, 1, 1), N);

	a = normalize(a);
	b = cross(N, a);
}

point project_vec2vec(point projTarget, point pA, point pB)
{
	point p2 = normalize(projTarget);
	point p1 = pA;
	point pC = pB;
	float dl = length(p2 - p1);
	float l2 = pow(dl,2);
	float t = dot(pC - p1, p2 - p1) / l2;
	point proj = p1 + t * (p2 - p1);
	return proj;
}

point nearest_vec2plane(point pOrig, point pTarg, point planeNrm)
{
	point vec = pTarg-pOrig;
	point pTargProjected = pTarg - dot(vec, planeNrm) * planeNrm;
	return pTargProjected;
}

point project_vec2plane(point pOrig, point pTarg, point planeNrm, point planeXAxis)
{
	//https://stackoverflow.com/questions/9605556/how-to-project-a-3d-point-to-a-3d-plane
	float proj_x = dot((pTarg-pOrig),planeXAxis);
	float proj_y = dot((pTarg-pOrig),cross(planeNrm,planeXAxis));
	return point(proj_x,proj_y,0.0);
}

shader charMat (
	point eyeCenter = point(0,0,0),
	point eyeUp = point(0,0,1),
	float eyeSize = 1.0,
	point eyeAspect = point(1,1,1),
	point eyeOffset = point(0,0,0),

	point eye_Ball_SmI_SmO = point(0.015, 0.003, 0.014),
	point eye_Iris_SmI_SmO = point(0, 0.002, -0.02),
	point eye_Freq_an1_an2 = point(10, 2.5, 4.6),

	point in_pos = P,

	output float out_eyeBase = 0.0,
	output float out_eyeBord = 0.0,
	output float out_eyeIris = 0.0,
	output point out_decarAxis = point(0,0,0),
	output point out_polarAxis = point(0,0,0),
	output point out_decarAxis0 = point(0,0,0),
	output float DBG = 0
)
{
	float eyeWidth = eye_Ball_SmI_SmO[0]*eyeSize;
	float eyeWidthI = eye_Ball_SmI_SmO[1]*eyeSize;
	float eyeWidthO = eye_Ball_SmI_SmO[2]*eyeSize;
	float eyeIrisFreq = eye_Freq_an1_an2[0];
	float eyeIrisI = eyeWidthI+eye_Iris_SmI_SmO[1]*eyeSize;
	float eyeIrisO = eyeWidthO+eye_Iris_SmI_SmO[2]*eyeSize;
	point pCamWrl = transform("camera", "common", point(0,0,0));

	point pThis = isconnected(in_pos)?in_pos:P;
	point pCenter0 = isconnected(eyeCenter)?eyeCenter:transform("object", "common", point(0,0,0));
	point eyeZUp = normalize(eyeUp);
	point eyeForw0 = normalize(pCamWrl-pCenter0);
	point eyeLeft0 = cross(eyeZUp,eyeForw0);
	point perp1 = normalize(cross(eyeUp,N));
	point perp2 = normalize(cross(perp1,N));
	point pCenter = pCenter0+eyeOffset[0]*perp1+eyeOffset[1]*perp2;
	point eyeLocalThis = pThis-pCenter;
	eyeLocalThis = point(eyeLocalThis[0]/eyeAspect[0],eyeLocalThis[1]/eyeAspect[1],eyeLocalThis[2]/eyeAspect[2]);
	point eyeLocalThis0 = pThis-pCenter0;
	point eyeForw = normalize(pCamWrl-pCenter);
	point proj2Up = nearest_vec2plane(point(0,0,0),eyeLocalThis,eyeZUp);
	point proj2Up0 = nearest_vec2plane(point(0,0,0),eyeLocalThis0,eyeZUp);
	point proj2Left = nearest_vec2plane(point(0,0,0),eyeLocalThis,eyeLeft0);
	point proj2Forw = nearest_vec2plane(point(0,0,0),eyeLocalThis,eyeForw);
	point projUp2N = nearest_vec2plane(point(0,0,0),eyeZUp,N);

	float eyeNormalDist = length(eyeLocalThis);
	float eyePointAngle = acos(dot(normalize(projUp2N),normalize(cross(normalize(eyeLocalThis),N))))*-1*sign(dot(eyeUp,eyeLocalThis))+M_PI*2;
	float eyeSide = 0;
	if(eyeNormalDist < eyeWidth){
		if(eyeNormalDist < eyeWidthI){
			eyeSide = 1;
		}else if(eyeNormalDist > eyeWidthO){
			eyeSide = 2;
		}else{
			eyeSide = 3;
		}
	}

	float midlfac = (eyeNormalDist-eyeWidthI)/(eyeWidthO-eyeWidthI);
	if(eyeNormalDist < eyeIrisI){
		midlfac = midlfac*pow((eyeNormalDist-eyeWidthI)/(eyeIrisI-eyeWidthI),2);
	}
	if(eyeNormalDist > eyeIrisO){
		midlfac = midlfac*pow(1.0-(eyeNormalDist-eyeIrisO)/(eyeWidthO-eyeIrisO),2);
	}
	float eyePointoUnspr = 1;
	if(eyeIrisFreq > 0){
		float sinAngle = eyePointAngle*eyeIrisFreq+eye_Iris_SmI_SmO[0];
		float eyePointLevel = sin(sinAngle);
		eyePointoUnspr = pow(eyePointLevel+1.0,1.3);
		float phasF = eye_Freq_an1_an2[1];
		float phasT = eye_Freq_an1_an2[2];
		if(fabs(phasF-phasT)>0.001){
			if(eyePointAngle < phasF){
				eyePointoUnspr = (smoothstep(phasF-0.15,phasF,eyePointAngle))*eyePointoUnspr;
			}
			if(eyePointAngle > phasT){
				eyePointoUnspr = (1.0-smoothstep(phasT,phasT+0.15,eyePointAngle))*eyePointoUnspr;
			}
		}
	}
	float irisSections = clamp(midlfac*eyePointoUnspr,0,1);
	out_eyeIris = 0;
	out_eyeBase = 0;
	out_eyeBord = 0;

	float decarX = length(eyeLeft0-eyeLocalThis)*sign(dot(eyeLocalThis,eyeLeft0));
	float decarY = length(eyeForw-eyeLocalThis)*sign(dot(eyeLocalThis,eyeForw));
	float decarZ = length(proj2Up-eyeLocalThis)*sign(dot(eyeLocalThis,eyeZUp));
	out_decarAxis = point(decarX/eyeWidth,decarY/eyeWidth,decarZ/eyeWidth);
	out_polarAxis = point(eyeNormalDist/eyeWidth,eyePointAngle,irisSections);

	float decarX0 = length(eyeLeft0-eyeLocalThis0)*sign(dot(eyeLocalThis0,eyeLeft0));
	float decarY0 = length(eyeForw0-eyeLocalThis0)*sign(dot(eyeLocalThis0,eyeForw0));
	float decarZ0 = length(proj2Up0-eyeLocalThis0)*sign(dot(eyeLocalThis0,eyeZUp));
	out_decarAxis0 = point(decarX0/eyeWidth,decarY0/eyeWidth,decarZ0/eyeWidth);
	if(eyeSide > 0){
		out_eyeBase = 1.0;
		if(eyeSide <= 2){
			out_eyeBord = 1.0;
		}else{
			out_eyeIris = 1.0;
		}
	}
	DBG = midlfac;
}
