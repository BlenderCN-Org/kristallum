#define WIDECOVER_MUL 1000000

//float triangleArea(point p1, point p2, point p3)
//{
//	point s1 = p2-p1;
//	point s2 = p3-p1;
//	float ar = 0.5*length(cross(s1,s2));
//	return ar;
//}

void make_orthonormals(vector N, output vector a, output vector b)
{
	if(N[0] != N[1] || N[0] != N[2]) a = cross(vector(1, 1, 1), N);
	else a = cross(vector(-1, 1, 1), N);
	a = normalize(a);
	b = cross(N, a);
}


shader detEdge(
	point opt_TestCone = point(0.004,4.0,4.0),
	point anti_FL_SP_BP = point(400.0,0.1,0.15),
	point in_pos = point(0,0,0),

	output float Holdout = 0.0,
	output float distMaxI = 0.0,
	output float distMaxO = 0.0,
	output float normMaxI = 0.0,
	output float normMaxO = 0.0,
	output float distAvg = 0.0,
	output float normAvg = 0.0)
{
	float coneRad = opt_TestCone[0];
	if(coneRad <= 0.0){
		// Fast exit for no-need-to-test cases
		return;
	}
	point pThis = isconnected(in_pos)?in_pos:P;
	point nThis = N;
	point pCamWrlIni = transform("camera", "common", point(0,0,0));
	point pDirIni = normalize(pThis - pCamWrlIni);
	float distBase = length(pThis - pCamWrlIni);
	float antiFlatArea = anti_FL_SP_BP[0];
	float sameFaceIO = anti_FL_SP_BP[1];
	float holdoutDiff = anti_FL_SP_BP[2];
	if(antiFlatArea > 0 && area(P)*WIDECOVER_MUL > antiFlatArea){
		Holdout = 999;
		return;
	}
	point triagVertx[3];
	getattribute("geom:trianglevertices",triagVertx);
	point triagId = triagVertx[0]+triagVertx[1]+triagVertx[2];

	point rp1 = N;
	point rp2 = N;
	//rp1 = cross(I,N);
	//rp2 = cross(I,rp1);
	make_orthonormals(I, rp1, rp2);
	float coneSteps1 = max(1,opt_TestCone[1]);
	float coneSteps2 = max(1,opt_TestCone[2]);
	float csdx = 1/coneSteps1;
	float csdy = 1/coneSteps2;

	float totlDs = 0;
	float totlNm = 0;
	float totlHt = 0;
	for(float ii = -1; ii <= 1; ii = ii+csdx){
		for(float jj = -1; jj <= 1; jj = jj+csdy){
			if(fabs(ii) + fabs(jj) < 0.01){
				continue;
			}
			point pCamWrl = pCamWrlIni+rp1*ii*coneRad+rp2*jj*coneRad;
			point pSideHit;
			int isHit = trace(pCamWrl, pDirIni);
			if(isHit < 1){
				distMaxO = 999;
				normMaxO = 999;
				continue;
			}
			float sideDist = distBase;
			point sideNang = nThis;
			getmessage("trace","P",pSideHit);
			getmessage("trace","N",sideNang);
			sideDist = length(pCamWrl-pSideHit);
			point hitVertx[3];
			getmessage("trace","geom:trianglevertices",hitVertx);
			point hitTriagId = hitVertx[0]+hitVertx[1]+hitVertx[2];
			if(length(hitTriagId - triagId) < sameFaceIO){
				continue;
			}
			int isHitNearTriangle = 0;
			if(length(hitVertx[0] - triagVertx[0]) < sameFaceIO){
				isHitNearTriangle = 1;
			}else if(length(hitVertx[1] - triagVertx[1]) < sameFaceIO){
				isHitNearTriangle = 1;
			}else if(length(hitVertx[2] - triagVertx[2]) < sameFaceIO){
				isHitNearTriangle = 1;
			}else if(length(hitVertx[0] - triagVertx[1]) < sameFaceIO){
				isHitNearTriangle = 1;
			}else if(length(hitVertx[0] - triagVertx[2]) < sameFaceIO){
				isHitNearTriangle = 1;
			}else if(length(hitVertx[1] - triagVertx[2]) < sameFaceIO){
				isHitNearTriangle = 1;
			}
			float nrmDist = fabs(acos(dot(sideNang,nThis)))/M_PI;
			float histDist = length(pThis-pSideHit);
			float posDist = sideDist-distBase;
			if(posDist >= 0)
			{
				if(isHitNearTriangle == 0){
					normMaxI = max(normMaxI,nrmDist);
				}else{
					normMaxO = max(normMaxO,nrmDist);
				}
				if(isHitNearTriangle == 0){
					distMaxO = max(distMaxO, histDist);
				}else{
					distMaxI = max(distMaxI, histDist);
				}
				totlHt = totlHt+1;
				totlDs = totlDs+histDist;
				totlNm = totlNm+nrmDist;
			}else if(holdoutDiff > 0 && histDist >= holdoutDiff){
				// Point completely non-valid, masking geometry present
				Holdout = 1;
				return;
			}
		}
	}
	if(totlHt > 0){
		distAvg = totlDs/totlHt;
		normAvg = totlNm/totlHt;
	}
}
