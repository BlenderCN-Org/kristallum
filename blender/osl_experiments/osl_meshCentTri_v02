#define RAY_MINOFFSET 0.0005
#define VC_MINLEVEL 0.01

point project_p2vec_v02(point p, point pA, point pB, int clamped)
{
	float dl = length(pA - pB);
	float l2 = pow(dl,2);
	float t = dot(p - pB, pA - pB) / l2;
	if(clamped >= 1){
		if(clamped >= 2){
			if(t>0.5){
				t=1.0;
			}else{
				t=0.0;
			}
		}else{
			t = min(1.0,t);
			t = max(0.0,t);
		}
	}
	point projection = pB + t * (pA - pB);
	return projection;
}

shader osl_meshTriCent (
	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),
	color vc_posValue = color(0,0,0),
	string vc_name = "",
	point default_center = point(0,0,0),
	float default_distance = 0,
	float detection_eps = 0.0,

	output float out_distance = 0,
	output point out_center = point(0,0,0),
	output float DEBUG = 0
)
{
	point pThis = isconnected(in_pos)?in_pos:P;
	point nThis = isconnected(in_nrm)?in_nrm:N;
	float thisVcMax = max(max(vc_posValue[0],vc_posValue[1]),vc_posValue[2]);
	out_distance = default_distance;
	out_center = default_center;
	if(thisVcMax < VC_MINLEVEL){
		return;
	}
	if(strlen(vc_name)>0){
		float vc_DtEps = detection_eps;
		if (vc_DtEps<RAY_MINOFFSET){
			vc_DtEps = RAY_MINOFFSET;
		}

		int isHit;
		color side_vc;
		point side_half;
		point side_half_shft;
		point triagVertx[4];
		int filled_sides_c = 0;
		point filled_sides[4];
		getattribute("geom:trianglevertices",triagVertx);

		// Getting side values - 1
		side_half = (triagVertx[0]+triagVertx[1])*0.5;
		side_half_shft = side_half+normalize(side_half-triagVertx[2])*vc_DtEps;
		isHit = trace(side_half_shft+nThis*vc_DtEps, -nThis, "maxdist", vc_DtEps*10);
		if(isHit>0){
			getmessage("trace",vc_name,side_vc);
			float side_vcMax = max(max(side_vc[0],side_vc[1]),side_vc[2]);
			if(side_vcMax >= VC_MINLEVEL){
				filled_sides[filled_sides_c] = side_half;
				filled_sides_c = filled_sides_c+1;
			}
		}
		// Getting side values - 2
		side_half = (triagVertx[1]+triagVertx[2])*0.5;
		side_half_shft = side_half+normalize(side_half-triagVertx[0])*vc_DtEps;
		isHit = trace(side_half_shft+nThis*vc_DtEps, -nThis, "maxdist", vc_DtEps*10);
		if(isHit>0){
			getmessage("trace",vc_name,side_vc);
			float side_vcMax = max(max(side_vc[0],side_vc[1]),side_vc[2]);
			if(side_vcMax >= VC_MINLEVEL){
				filled_sides[filled_sides_c] = side_half;
				filled_sides_c = filled_sides_c+1;
			}
		}
		// Getting side values - 3
		side_half = (triagVertx[2]+triagVertx[0])*0.5;
		side_half_shft = side_half+normalize(side_half-triagVertx[1])*vc_DtEps;
		isHit = trace(side_half_shft+nThis*vc_DtEps, -nThis, "maxdist", vc_DtEps*10);
		if(isHit>0){
			getmessage("trace",vc_name,side_vc);
			float side_vcMax = max(max(side_vc[0],side_vc[1]),side_vc[2]);
			if(side_vcMax >= VC_MINLEVEL){
				filled_sides[filled_sides_c] = side_half;
				filled_sides_c = filled_sides_c+1;
			}
		}
		point triagCenter = (triagVertx[0]+triagVertx[1]+triagVertx[2])*0.33;
		if(filled_sides_c == 3){
			out_center = project_p2vec_v02(pThis,filled_sides[0],triagCenter,1);
			point out_center2 = project_p2vec_v02(pThis,filled_sides[1],triagCenter,1);
			if(length(pThis-out_center)>length(pThis-out_center2)){
				out_center = out_center2;
			}
			point out_center3 = project_p2vec_v02(pThis,filled_sides[2],triagCenter,1);
			if(length(pThis-out_center)>length(pThis-out_center3)){
				out_center = out_center3;
			}
			out_distance = length(pThis-out_center);
		}
		if(filled_sides_c == 2){
			out_center = project_p2vec_v02(pThis,filled_sides[0],filled_sides[1],1);
			out_distance = length(pThis-out_center);
		}
		if(filled_sides_c == 1){
			out_center = project_p2vec_v02(pThis,filled_sides[0],triagCenter,1);
			out_distance = length(pThis-out_center);
		}
		return;
	}
}
