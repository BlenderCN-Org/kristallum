// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html

#define WRI_OBJECT_PREFIX "wri_"
#define WRI_VERTEXCOL_NAME "Wri"
#define ISWHITE(cl) (fabs(cl[0]-cl[1])<0.01 && fabs(cl[0]-cl[2])<0.01)

shader charWriVc (
	float base_Level = 0.0,
	point base_Rad_StepsU_StepsV = point(1.0, 30, 10),
	float base_Elevation = 0.05,
	point wri_RGBFalloff = point(0.1,0.05,0.02),
	float wri_Level = 1.0,

	point in_pos = point(0,0,0),
	point in_nrm = point(0,0,0),
	color in_color = color(0,0,0),
	string in_color_vcname = "",
	string wri_ObjPrefix = "",

	output float out_Level = 0.0,
	output point out_Normal = 0.0,
	output float Wri = 0.0
){

	float testWidthRadians = base_Rad_StepsU_StepsV[0];
	float testStepsU = 1/max(1,base_Rad_StepsU_StepsV[1]);
	float testStepsV = 1/max(1,base_Rad_StepsU_StepsV[2]);
	string vcname = in_color_vcname;
	if(strlen(vcname)<3){
		vcname = WRI_VERTEXCOL_NAME;
	}

	point pThis = length(in_pos)>0?in_pos:P;
	point nThis = length(in_nrm)>0?in_nrm:N;
	point pTraceRoot = pThis+nThis*base_Elevation;
	point nTraceDir = -nThis;
    point pTracePerp = cross(nThis,point(0,0,1));
	color pThisColor;
	getattribute(vcname, pThisColor);
	if(ISWHITE(pThisColor)){
		pThisColor = color(0,0,0);
	}

	string WOP = wri_ObjPrefix;
    if(strlen(WOP)<3){
        WOP = WRI_OBJECT_PREFIX;
    }

	string thisId;
	getattribute("geom:name",thisId);
	if(startswith(thisId,WOP) > 0){
		string hitId;
		point pCurr = pThis;
		point pSideHit;
		point nSideHit;
		int isHit = trace(pCurr-nThis*0.00001, -nThis);
		getmessage("trace","geom:name",hitId);
		getmessage("trace","P",pSideHit);
		getmessage("trace","N",nSideHit);
		if(isHit > 0 && startswith(hitId,WOP) < 1){
			float wriDist = length(pCurr-pSideHit);
			wriDist = wriDist/(2*base_Elevation);
			nThis = mix(nSideHit,nThis,clamp(wriDist,0,1));
			//nThis = nSideHit;
		}
	}

	float hitsCount = max(max(pThisColor[0],pThisColor[1]),pThisColor[2]);
	float hitsSumm = 0;
	for(float ii=0; ii<1; ii = ii+testStepsU){
		float raySumm = 0;
		float fRayWeight = 1.0;
		float r1=mix(0, M_2PI, ii);//+0.1*noise("perlin",pThis[0])
		point pTracePerp2 = rotate(pTracePerp,r1,point(0,0,0),nThis);
		for(float jj=testStepsV*0.1; jj<1; jj = jj+testStepsV){
			float hitWeight = (1.0-jj);
			float r2=mix(0, testWidthRadians, jj);
			point nTraceDir2 = rotate(nTraceDir,r2,point(0,0,0),pTracePerp2);
			int isHit = trace(pTraceRoot, nTraceDir2);
			if(isHit > 0){
				point hitPos = point(0,0,0);
				color hitColor = color(0,0,0);
				getmessage("trace", vcname, hitColor);
				getmessage("trace", "P", hitPos);
				if(ISWHITE(hitColor)){
					float hitLevel = (hitColor[0]+hitColor[1]+hitColor[2])/3;
					fRayWeight = min(fRayWeight,(1.0-hitLevel));
				}else{
					float dist = length(hitPos-pThis);
					float distFacR = hitColor[0]*(1.0-clamp(dist/wri_RGBFalloff[0],0,1));
					float distFacG = hitColor[1]*(1.0-clamp(dist/wri_RGBFalloff[1],0,1));
					float distFacB = hitColor[2]*(1.0-clamp(dist/wri_RGBFalloff[2],0,1));
					raySumm = max(raySumm,max(max(distFacR,distFacG),distFacB)*fRayWeight*hitWeight);
				}
			}else{
				fRayWeight = 0.0;
			}
			if(fRayWeight<0.0001){
				break;
			}
		}
		//hitsCount = hitsCount+1;
		hitsSumm = max(hitsSumm,raySumm);
	}
	Wri = hitsSumm;//hitsSumm/hitsCount;
	out_Level = base_Level+Wri*wri_Level;
	out_Normal = nThis;
}
