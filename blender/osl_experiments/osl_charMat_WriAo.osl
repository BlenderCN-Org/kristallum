// https://github.com/imageworks/OpenShadingLanguage/blob/master/src/doc/osl-languagespec.pdf
// https://docs.blender.org/manual/en/dev/render/cycles/nodes/osl.html
// To prevent "AO leaking" ignoring far points (near plane is not affected by objects BEHIND it)
// Wrinkles-objects should have special prefix
#define PUMASKIN_PREFIX "skl_"
#define NORMALIZE(value, nrm, normalAffect, clampArray) {\
	float res = value;\
	if(normalAffect>0){\
		res = res*mix(1,nrm,normalAffect);\
	}else if(normalAffect<0){\
		res = res*mix(1,(1-nrm),-1*normalAffect);\
	}\
	res = (res - clampArray[0])/(clampArray[1]-clampArray[0]);\
	res = pow(clamp(res,0,1),clampArray[2]);\
	value = res;\
}


shader charMat (
    float baseLevel = 0.5,
    point pixel_Wfrac_Steps = point(0.02, 5, 0),

    float lt_Level = 0.5,
    point lt_Size_Pow_Nafk = point(0.5, 1.0, 1.0),
    point lt_Normalize = point(0.0, 1.0, 1.0),
    point lt_Dir = point(0, -1.1, 1),

    float ao_Level = -0.3,
    point ao_Size_Dist_Vafk = point(1.0, 0.1, 1.0),
    point ao_Normalize = point(0.15, 0.3, 2.0),

    float sp_Level = -0.2,
    point sp_Size_Dist_Vafk = point(0.2, 0.01, 0.0),
    point sp_Normalize = point(0.01, 0.1, 1.0),

    float wriao_Level = -0.5,
    point wriao_Size_Dist_Vafk = point(1.0, 0.05, 1.0),
    point wriao_Normalize = point(0.0, 1.0, 1.0),

    float wricl_Level = 0.0,
    point wricl_Max_Min_Vafk = point(0.2,0.1,1.0),
    point wricl_Normalize = point(0.0, 1.0, 1.0),

	output float Total = 0.0,
	output float Lt = 0.0,
	output float Ao = 0.0,
	output float Sp = 0.0,
	output float Dr = 0.0,
	output float WriCl = 0.0,
	output float WriAo = 0.0
){

    point rbtPixels = transform("raster", point("NDC", 1,1,0));
    float pixelWidth = min(rbtPixels[0],rbtPixels[1])*pixel_Wfrac_Steps[0];
    float pixelStep = pixelWidth/max(0.01,pixel_Wfrac_Steps[1]);

    float ltSoftness = lt_Size_Pow_Nafk[0];
    float ltExpL = lt_Size_Pow_Nafk[1];
    float ltNormalAffect = lt_Size_Pow_Nafk[2];

    float aoSoftness = ao_Size_Dist_Vafk[0];
    float aoMinDst = ao_Size_Dist_Vafk[1];
    float aoViewAffect = ao_Size_Dist_Vafk[2];

    float spSoftness = sp_Size_Dist_Vafk[0];
    float spMinDst = sp_Size_Dist_Vafk[1];
    float spViewAffect = sp_Size_Dist_Vafk[2];

    float wriClMaxDst = wricl_Max_Min_Vafk[0];
    float wriClNBlnd = wricl_Max_Min_Vafk[1];
    float wriClNormalAffect = wricl_Max_Min_Vafk[2];

    float wriAoSoftness = wriao_Size_Dist_Vafk[0];
    float wriAoMinDst = wriao_Size_Dist_Vafk[1];
    float wriaoNormalAffect = wriao_Size_Dist_Vafk[2];

    aoSoftness = max(0.0,aoSoftness);
    spSoftness = max(0.0,spSoftness);
    ltSoftness = max(0.0,ltSoftness);
    wriAoSoftness = max(0.0,wriAoSoftness);

    point pThis = P;
    point nThis = N;
    string thisId;
    getattribute("geom:name",thisId);
    point pCamWrl = point("camera", 0, 0, 0);
    point pThisRST = transform("raster", pThis);
    float distBase = length(pCamWrl-pThis);
    point nFarFarAway = pCamWrl+9999*(pCamWrl-pThis);

    point pSideHit;
    point nSideHit;
    float hitDist;
    float hitCamDist;
    float wriClDist = 0;
    float wriAoBlend = 0.0;
    int isHit;
    string hitId;

    if(fabs(wricl_Level) > 0.0){
        point pCurr = pThis;
        isHit = trace(pCurr, -nThis);
        if(isHit > 0){
            getmessage("trace","geom:name",hitId);
            for(int skipcc = 0;skipcc<5;skipcc++){
                if(startswith(hitId,PUMASKIN_PREFIX) > 0){
                    // masking self intersections!
                    getmessage("trace","P",pSideHit);
                    wriClDist = wriClDist+length(pCurr-pSideHit);
                    pCurr = pSideHit;
                    isHit = trace(pCurr, -nThis);
                    getmessage("trace","geom:name",hitId);
                }else{
                    break;
                }
            }
            if(isHit > 0){
                getmessage("trace","P",pSideHit);
                getmessage("trace","N",nSideHit);
                wriClDist = wriClDist+length(pCurr-pSideHit);
                wriAoBlend = clamp(wriClDist/wriClNBlnd,0,1);
                nThis = mix(nSideHit,nThis,wriAoBlend);
            }
        }
    }

    point ltDirN = normalize(lt_Dir);
    float ltDot = max(0,dot(nThis,ltDirN));
    point viDirN = normalize(pCamWrl-pThis);
    float viDot = max(0,dot(nThis,viDirN));

    float testStep = pixelStep;
    float testWidth = pixelWidth;
    float aoDistCount = 0;
    float spLevlCount = 0;
    float ltLevlCount = 0;
    float wriAoDistCount = 0;
    float testTotalAo = 0;
    float testTotalSp = 0;
    float testTotalLt = 0;
    float testTotalwriAo = 0;
    if(testWidth > 0 && fabs(ao_Level)+fabs(sp_Level)+fabs(lt_Level)>0){
        for(float xi=-testWidth;xi<testWidth;xi = xi+testStep){
            for(float yi=-testWidth;yi<testWidth;yi = yi+testStep){
                float ptlen = sqrt(xi*xi+yi*yi);
                if(ptlen > testWidth+0.1){
                    continue;
                }
                float ltWeight = 1.0-ptlen/(testWidth*ltSoftness);
                float aoWeight = 1.0-ptlen/(testWidth*aoSoftness);
                float spWeight = 1.0-ptlen/(testWidth*spSoftness);
                float wriAoWeight = 1.0-ptlen/(testWidth*wriAoSoftness);
                if(ltWeight <= 0 && aoWeight <= 0
                    && spWeight <= 0 && wriAoWeight <= 0){
                    continue;
                }

                point pSideRst = pThisRST+point(xi,yi,0);
                point pSideWlr = transform("raster", "world", pSideRst);
                isHit = trace(pCamWrl, pSideWlr-pCamWrl);
                if(isHit > 0){
                    getmessage("trace","N",nSideHit);
                    getmessage("trace","P",pSideHit);
                    getmessage("trace","geom:name",hitId);
                }else{
                    nSideHit = nThis;
                    pSideHit = nFarFarAway;
                }
                point dir2hit = pThis-pSideHit;
                hitDist = length(dir2hit);
                hitCamDist = length(pSideHit-pCamWrl);


                if(ltWeight > 0){
                    testTotalLt = testTotalLt+1*ltWeight;
                    isHit = trace(pSideHit+ltDirN*0.001, ltDirN);
                    if(isHit < 1){
                        ltLevlCount = ltLevlCount+1*ltWeight;
                    }
                }

                if(aoWeight > 0){
                    testTotalAo = testTotalAo+1;
                    if(hitCamDist <= distBase)
                    {
                        if(aoWeight*hitDist > aoMinDst){
                            aoDistCount = aoDistCount+1;
                        }else{
                            aoDistCount = aoDistCount+aoWeight*hitDist/aoMinDst;
                        }
                    }
                }

                if(spWeight > 0){
                    testTotalSp = testTotalSp+1;
                    if(hitCamDist <= distBase)
                    {
                        float dist2pln = fabs(dot(dir2hit,nThis));
                        if(spWeight*dist2pln > spMinDst){
                            spLevlCount = spLevlCount+1;
                        }else{
                            spLevlCount = spLevlCount+spWeight*dist2pln/spMinDst;
                        }
                    }
                }

                if(wriAoWeight > 0){
                    testTotalwriAo = testTotalwriAo+1;
                    if(hitCamDist <= distBase)
                    {
                        if(startswith(hitId,PUMASKIN_PREFIX) > 0){
                            if(wriAoWeight*hitDist > wriAoMinDst){
                                wriAoDistCount = wriAoDistCount+1;
                            }else{
                                wriAoDistCount = wriAoDistCount+wriAoWeight*hitDist/wriAoMinDst;
                            }
                        }
                    }
                }
            }
        }
    }

    Ao = aoDistCount/testTotalAo;
    NORMALIZE(Ao,viDot,aoViewAffect,ao_Normalize);

    Sp = spLevlCount/testTotalSp;
    NORMALIZE(Sp,viDot,spViewAffect,sp_Normalize);

    Lt = pow(ltLevlCount/testTotalLt,ltExpL);
    NORMALIZE(Lt,ltDot,ltNormalAffect,lt_Normalize);

    WriAo = wriAoDistCount/testTotalwriAo;
    NORMALIZE(WriAo,viDot,wriaoNormalAffect,wriao_Normalize);
    WriAo = WriAo*(1.0-wriAoBlend);

    WriCl = min(wriClDist,wriClMaxDst)/wriClMaxDst;
    NORMALIZE(WriCl,viDot,wriClNormalAffect,wricl_Normalize);

    Total = baseLevel
        + min(min(Ao*ao_Level, Sp*sp_Level), WriAo*wriao_Level)
        + Lt*lt_Level
        + WriCl*wricl_Level;
}
